name: ðŸ”‚ Unit tests

on:
  push:
    branches: [main]
  pull_request:
    inputs:
      targets:
        required: true
        description: 'JSON of all your targets'
    branches: [main]
    paths:
      - "qtgql/**"
      - "src/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/test.yml"

env:
  IS_GITHUB_ACTION: 1


jobs:
  provide_testcase_matrix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install

      - id: set_matrix
        run: |
          echo "matrix=$(cd .github && poetry run python -m workflows.scripts.create_testcases_matrix)" >> $GITHUB_OUTPUT

    # here, we save the result of this 1st phase to the "outputs"
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

  tests:
    name: ${{matrix.profile.profile}} ${{matrix.profile.runner_os}} py${{matrix.python_version}} qt${{matrix.qt_version}}- ${{toJSON(matrix.testcases)}}
    runs-on: ${{ matrix.profile.runner_os }}
    needs: provide_testcase_matrix
    strategy:
      fail-fast: false
      matrix:  ${{ fromJson(needs.provide_testcase_matrix.outputs.matrix) }}

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python_version}}
          cache: 'poetry'
      - run: poetry install

      - name: Install Qt dependencies
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install libxcb-cursor-dev build-essential libgl1-mesa-dev libgstreamer-gl1.0-0 libpulse-dev libxcb-glx0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-render0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxcb-xfixes0 libxcb-xinerama0 libxcb1 libxkbcommon-dev libxkbcommon-x11-0 libxcb-xkb-dev
          echo "QT_QPA_PLATFORM=xcb" >> $GITHUB_ENV
      - name: install mingw - windows
        if: runner.os == 'Windows' && contains(matrix.profile.profile, 'mingw')
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          version: "11.2.0"
      - name: install msvc - windows
        if: runner.os == 'Windows' && contains(matrix.profile.profile, 'msvc')
        uses: TheMrMilchmann/setup-msvc-dev@v2
        with:
          arch: x64
          toolset: 14.3

      - name: Generate test files and coverage python
        shell: bash
        env:
            MATRIX_TESTCASES: ${{ toJson(matrix.testcases) }}
        run: |
          poetry run coverage run tests/test_codegen/generate.py

      - name: Conan profile detect
        run: |
          poetry run conan profile detect

      - uses: actions/cache@v3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/MyConnandeps
          key: Qt6 # there is no need for something dynamic conan will pick the right one any-ways

      - uses: actions/cache@v3
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\MyConnandeps
          key: Qt6 # there is no need for something dynamic conan will pick the right one any-ways


      - name: Conan build
        shell: bash
        env:
          SHOULD_TEST_CORE: ${{ env.SHOULD_TEST_CORE }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            poetry run conan build . -o test_gen=True -o test_core=${{env.SHOULD_TEST_CORE}} -s build_type=Debug  -o qt_version=${{matrix.qt_version}} -pr=profiles/Windows_mingw --build=missing;
          elif [ "$RUNNER_OS" == "Linux" ]; then
            poetry run xvfb-run -a conan build . -o test_gen=True -o test_core=${{env.SHOULD_TEST_CORE}} -o qt_version=${{matrix.qt_version}} -s build_type=Debug -pr=profiles/Linux --build=missing -c tools.system.package_manager:sudo=True -c tools.system.package_manager:mode=install
          fi

      - name: Run tests
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            poetry run pytest tests --cov=qtgqlcodegen --cov-report=xml --cov-append
          elif [ "$RUNNER_OS" == "Linux" ]; then
            poetry run make test
          fi


      - name: Codecov
        uses: codecov/codecov-action@v3.1.4
