name: ðŸ”‚ Unit tests

on:
  push:
    branches: [main]
  pull_request:
    inputs:
      targets:
        required: true
        description: 'JSON of all your targets'
    branches: [main]
    paths:
      - "qtgql/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/test.yml"

env:
  IS_GITHUB_ACTION: 1
  QT_DEBUG_PLUGINS: 1
  QT_QPA_PLATFORM: "xcb"

jobs:
  provide_testcase_matrix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - id: set_matrix
        run: |
          echo "matrix=$(cd .github && poetry run python -m workflows.scripts.create_testcases_matrix)" >> $GITHUB_OUTPUT

    # here, we save the result of this 1st phase to the "outputs"
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}

  tests:
    name: ${{matrix.os}} py${{ matrix.python_version }} - ${{toJSON(matrix.testcases)}}
    runs-on: ${{ matrix.os }}
    needs: provide_testcase_matrix
    strategy:
      fail-fast: false
      matrix:  ${{ fromJson(needs.provide_testcase_matrix.outputs.matrix) }}

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      #----------------------------------------------
      #        load pip cache if cache exists
      #----------------------------------------------
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        run: |
          pip install poetry
          poetry install
      - name: Set up MinGW - Windows
        if: runner.os == 'Windows'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Install Qt dependencies
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install  libxcb1 libxcb-icccm4-dev libxcb-sync-dev libxres-dev libxcomposite-dev libice-dev libxau-dev libxcb-xfixes0 libxcursor-dev libxtst-dev libxss-dev libxcb-dri3-dev libx11-xcb-dev libxmuu-dev libxcb-xinerama0-dev libxcb-shm0 libx11-dev libxcb-keysyms1 libxi-dev libgstreamer-gl1.0-0 libxaw7-dev libxinerama-dev libxcb-icccm4 libpulse-dev libxcb-randr0 libxv-dev libxcb-cursor-dev libxcb-render0 libsm-dev libxcb-shape0-dev libxcb-shape0 libxcb-xfixes0-dev libxvmc-dev libfontenc-dev libxdamage-dev libgl1-mesa-dev libxcb-xinerama0 libxkbcommon-x11-0 build-essential libxcb-util1 libxcb-image0 libxcb-render-util0 libxcb-sync1 libxxf86vm-dev libxcb-glx0 libxcb-randr0-dev libxcb-keysyms1-dev libxrandr-dev libxcb-xkb-dev libxfixes-dev libxkbcommon-dev
      - name: Generate test files and coverage python
        shell: bash
        env:
            MATRIX_TESTCASES: ${{ toJson(matrix.testcases) }}
        run: |
          poetry run coverage run tests/test_codegen/generate.py

      - name: Conan profile detect
        run: |
          poetry run conan profile detect

      - name: Conan build
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            poetry run conan build . -o test=True -s build_type=Debug -pr=profiles/Windows_msvc --build=missing
          elif [ "$RUNNER_OS" == "Linux" ]; then
            poetry run xvfb-run -a conan build . -o test=True -s build_type=Debug -pr=profiles/${{ runner.os }} --build=missing
          fi

      - name: Run tests
        shell: bash
        run: |

          if [ "$RUNNER_OS" == "Windows" ]; then
            poetry run pytest tests --cov=qtgqlcodegen --cov-report=xml --cov-append
          elif [ "$RUNNER_OS" == "Linux" ]; then
            poetry run make test
          fi


      - name: Codecov
        uses: codecov/codecov-action@v3.1.4
