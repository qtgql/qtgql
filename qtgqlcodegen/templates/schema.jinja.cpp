#include "schema.hpp"

namespace ðŸ‘‰ context.config.env_name ðŸ‘ˆ{
{% for interface in context.interfaces -%}
std::shared_ptr<ðŸ‘‰ interface.name ðŸ‘ˆ> ðŸ‘‰ interface.name ðŸ‘ˆ::from_json(const QJsonObject& data,
                                                     const qtgql::bases::SelectionsConfig &config,
                                                     const qtgql::bases::OperationMetadata& metadata){
    auto tp_name = data["__typename"].toString();
    {% for impl in interface.implementations.values() -%}
    if ("ðŸ‘‰ impl.name ðŸ‘ˆ" == tp_name){
        return std::static_pointer_cast<ðŸ‘‰ interface.name ðŸ‘ˆ>(ðŸ‘‰ impl.name ðŸ‘ˆ::from_json(data, config, metadata));
    }
    {% endfor %}
    throw qtgql::exceptions::InterfaceDeserializationError(tp_name.toStdString());
    }
{% endfor %}
}