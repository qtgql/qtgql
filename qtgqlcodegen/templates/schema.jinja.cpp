{% import "macros.jinja.cpp" as macros -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <memory>
#include <qtgqlobjecttype.hpp>
#include <qtgqlmetadata.hpp>
#include <qtgqlconstants.hpp>
namespace ğŸ‘‰context.config.env_nameğŸ‘ˆ{
{% macro init_and_props(type) %}
protected:

{% for f in type.fields -%}
ğŸ‘‰f.annotationğŸ‘ˆ ğŸ‘‰f.private_nameğŸ‘ˆ = ğŸ‘‰f.default_valueğŸ‘ˆ;
{% endfor %}

public:
ğŸ‘‰type.nameğŸ‘ˆ (QObject* parent = nullptr)
    : QObject::QObject(parent) {};

signals:
{%for f in type.fields -%}
void ğŸ‘‰f.signal_nameğŸ‘ˆ();
{% endfor %}

public:
{%for f in type.fields %}
void ğŸ‘‰f.setter_nameğŸ‘ˆ(const ğŸ‘‰f.annotationğŸ‘ˆ &v)
{
  ğŸ‘‰f.private_nameğŸ‘ˆ = v;
  emit ğŸ‘‰f.signal_nameğŸ‘ˆ();
};
{% endfor %}
{% endmacro %}
// ----------- Object Types -----------
{% for type in context.types %}
class ğŸ‘‰ type.name ğŸ‘ˆ : public {% if type.has_id_field %}
qtgql::QtGqlObjectTypeABC {% else %} qtgql::QtGqlObjectTypeWithIdABC{% endif %}{

inline static const QString TYPE_NAME = "ğŸ‘‰type.nameğŸ‘ˆ";
ğŸ‘‰init_and_props(type)ğŸ‘ˆ

public:
std::shared_ptr<ğŸ‘‰type.nameğŸ‘ˆ> from_json(QObject * parent, const QJsonObject& data,
                                 const qtgql::SelectionsConfig& config,
                                 const qtgql::OperationMetadata& metadata){
auto inst = std::make_shared<ğŸ‘‰type.nameğŸ‘ˆ>();
{% for f in type.fields -%}
{% set assign_to %} inst->ğŸ‘‰f.private_nameğŸ‘ˆ {% endset %}
ğŸ‘‰macros.deserialize_field(f, assign_to)ğŸ‘ˆ
{% endfor %}
{% if type.id_is_optional %}
if (inst->id) {
  auto record = NodeRecord(node = inst, retainers = set())
                    .retain(metadata.operation_name)
                        cls.__store__.add_record(record)
}
{% elif type.has_id_field and not type.id_is_optional %} record =
    NodeRecord(node = inst, retainers = set())
        .retain(metadata.operation_name);
    cls.__store__.add_record(record); 
{% endif %}
return inst;
  };
  
};
{% endfor %}
}