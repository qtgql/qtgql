{%- from "macros/concrete_type_fields.jinja.hpp" import concrete_type_fields -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <QJsonArray>
#include <memory>

#include <qtgql/bases/bases.hpp>
{% for dep in context.dependencies -%}
ğŸ‘‰ dep ğŸ‘ˆ
{% endfor %}

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ{
{% if context.enums %}
// ---------- Enums ----------

class Enums{
    Q_GADGET

public:
{% for enum in context.enums %}
enum ğŸ‘‰enum.nameğŸ‘ˆ{
{% for member in enum.members -%}
ğŸ‘‰member.nameğŸ‘ˆ = ğŸ‘‰member.indexğŸ‘ˆ,
{% endfor %}
};
Q_ENUM(ğŸ‘‰enum.nameğŸ‘ˆ)
struct ğŸ‘‰enum.map_nameğŸ‘ˆ{
Q_GADGET
public:
inline static const std::vector<std::pair<QString, ğŸ‘‰enum.nameğŸ‘ˆ>> members = {
        {% for member in enum.members -%}
        {"ğŸ‘‰member.nameğŸ‘ˆ", ğŸ‘‰enum.nameğŸ‘ˆ::ğŸ‘‰member.nameğŸ‘ˆ},
        {% endfor %}
};
    GraphQLEnum_MACRO(ğŸ‘‰enum.nameğŸ‘ˆ)
};

{% endfor %}
};
{% endif %}

// ---------- INPUT OBJECTS ----------
{% for type in context.input_objects -%}
/*
 * ğŸ‘‰ type.docstring ğŸ‘ˆ
 */
struct ğŸ‘‰type.nameğŸ‘ˆ{

public:
{# // this is doubtfully needed, but std::map requires comparison for ordering. #}
bool operator<(const ğŸ‘‰type.nameğŸ‘ˆ& other) const {
    {% for f in type.fields -%}
    if(ğŸ‘‰f.nameğŸ‘ˆ < other.ğŸ‘‰f.nameğŸ‘ˆ){
        return true;
    }
    {% endfor -%}
    return false;
}
{% for f in type.fields -%}
std::optional<ğŸ‘‰f.type.member_typeğŸ‘ˆ> ğŸ‘‰f.nameğŸ‘ˆ = {};
{% endfor %}
[[nodiscard]] QJsonObject to_json() const{
    auto ret = QJsonObject();
    {% for f in type.fields %}{% set attr_name %}ğŸ‘‰f.nameğŸ‘ˆ{% endset %}
    if (ğŸ‘‰attr_nameğŸ‘ˆ.has_value()){
        ret.insert("ğŸ‘‰f.nameğŸ‘ˆ", ğŸ‘‰f.json_repr(attr_name)ğŸ‘ˆ);
    }
    {% endfor %}
    return ret;
}
};
{% endfor %}

// ---------- Interfaces ----------
{% for interface in context.interfaces -%}
class ğŸ‘‰ interface.name ğŸ‘ˆ {% for base in interface.bases %} {%if loop.first %}: {% endif %} public ğŸ‘‰ base.name ğŸ‘ˆ {% if not loop.last %}, {% endif %}{% endfor %}{
Q_OBJECT

ğŸ‘‰ concrete_type_fields(interface) ğŸ‘ˆ

{% if interface.is_node_interface -%}
static auto & ENV_CACHE() {
        static auto cache = qtgql::bases::Environment::get_env_strict("ğŸ‘‰ context.config.env_name ğŸ‘ˆ")->get_cache();
        return cache;
}
{% endif %}
};
{% endfor %}

// ---------- Object Types ----------
{# forward references -#}
{% for type in context.types -%}
class ğŸ‘‰ type.name ğŸ‘ˆ;
{% endfor %}

{% for type in context.types %}
{%- set base_class -%}{% if type. implements_node %}NodeInterfaceABC{% else %}ObjectTypeABC{% endif %}{%- endset -%}
class ğŸ‘‰ type.name ğŸ‘ˆ {% for base in type.bases %}{%if loop.first%}: {% endif %} public ğŸ‘‰ base.name ğŸ‘ˆ {% if not loop.last %}, {% endif %}{% endfor %}{
Q_OBJECT
ğŸ‘‰ concrete_type_fields(type) ğŸ‘ˆ
public:
{% if type.is_root %} {# root types should be singletons #}
[[nodiscard]] static ğŸ‘‰ type.name ğŸ‘ˆ* instance(){
static ğŸ‘‰ type.name ğŸ‘ˆ inst;
return &inst;
}
{% else %}
QTGQL_STATIC_MAKE_SHARED(ğŸ‘‰ type.name ğŸ‘ˆ)
{% endif %}

ğŸ‘‰ type.name ğŸ‘ˆ()= default;

public:
inline const QString & __typename() const final{
static const QString ret = "ğŸ‘‰ type.name ğŸ‘ˆ";
return ret;
};
};
{% endfor %}

}