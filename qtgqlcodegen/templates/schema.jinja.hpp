{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <memory>

#include <qtgql/bases/bases.hpp>
{% for dep in context.dependencies -%}
ðŸ‘‰ dep ðŸ‘ˆ
{% endfor %}

namespace ðŸ‘‰ context.config.env_name ðŸ‘ˆ{

// ----------- Object Types -----------
{% for type in context.types %}
{%- set base_class -%}{% if type.has_id_field %}ObjectTypeABCWithID{% else %}ObjectTypeABC{% endif %}{%- endset -%}
class ðŸ‘‰ type.name ðŸ‘ˆ : public qtgql::bases::ðŸ‘‰ base_class ðŸ‘ˆ{
protected:
static auto & INST_STORE() {
    static qtgql::bases::ObjectStore<ðŸ‘‰ type.name ðŸ‘ˆ> _store;
    return _store;
}

ðŸ‘‰ macros.concrete_type_fields(type) ðŸ‘ˆ
public:
inline static const QString TYPE_NAME = "ðŸ‘‰ type.name ðŸ‘ˆ";

explicit ðŸ‘‰ type.name ðŸ‘ˆ (QObject* parent = nullptr)
: qtgql::bases::ðŸ‘‰ base_class ðŸ‘ˆ::ðŸ‘‰ base_class ðŸ‘ˆ(parent) {};


static std::shared_ptr<ðŸ‘‰ type.name ðŸ‘ˆ> from_json(const QJsonObject& data,
                                 const qtgql::bases::SelectionsConfig &config,
                                 const qtgql::bases::OperationMetadata& metadata){
if (data.isEmpty()){
    return {};
}
auto inst = std::make_shared<ðŸ‘‰ type.name ðŸ‘ˆ>();
{% for f in type.fields -%}
{% set assign_to %} inst->ðŸ‘‰ f.private_name ðŸ‘ˆ {% endset %}
ðŸ‘‰macros.deserialize_field(f, assign_to)ðŸ‘ˆ
{% endfor %}
{% if type.id_is_optional %}
if (inst->id) {
  auto record = qtgql::bases::NodeRecord(node = inst, retainers = set())
                    .retain(metadata.operation_name)
                        cls.INST_STORE.add_record(record)
}
{% elif type.has_id_field and not type.id_is_optional %}
auto record = std::make_shared<qtgql::bases::NodeRecord<ðŸ‘‰ type.name ðŸ‘ˆ>>(inst);
record->retain(metadata.operation_id);
INST_STORE().add_record(record);
{% endif %}
return inst;
};

void loose(const qtgql::bases::OperationMetadata &metadata){throw "not implemented";};
void update(const QJsonObject &data,
            const qtgql::bases::SelectionsConfig &selections){throw "not implemented";};

};
{% endfor %}

}