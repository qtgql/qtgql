{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <memory>

#include <qtgql/bases/bases.hpp>
{% for dep in context.dependencies -%}
ğŸ‘‰ dep ğŸ‘ˆ
{% endfor %}

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ{
{% if context.enums %}
// ---------- Enums ----------

class Enums{
    Q_GADGET

public:
{% for enum in context.enums %}
enum ğŸ‘‰enum.nameğŸ‘ˆ{
{% for member in enum.members -%}
ğŸ‘‰member.nameğŸ‘ˆ = ğŸ‘‰member.indexğŸ‘ˆ,
{% endfor %}
};
Q_ENUM(ğŸ‘‰enum.nameğŸ‘ˆ)
struct ğŸ‘‰enum.map_nameğŸ‘ˆ{
Q_GADGET
public:
inline static const std::vector<std::pair<QString, ğŸ‘‰enum.nameğŸ‘ˆ>> members = {
        {% for member in enum.members -%}
        {"ğŸ‘‰member.nameğŸ‘ˆ", ğŸ‘‰enum.nameğŸ‘ˆ::ğŸ‘‰member.nameğŸ‘ˆ},
        {% endfor %}
};
    GraphQLEnum_MACRO(ğŸ‘‰enum.nameğŸ‘ˆ)
};

{% endfor %}
};
{% endif %}

// ---------- Object Types ----------
{% for type in context.types %}
{%- set base_class -%}{% if type.has_id_field %}ObjectTypeABCWithID{% else %}ObjectTypeABC{% endif %}{%- endset -%}
class ğŸ‘‰ type.name ğŸ‘ˆ : public qtgql::bases::ğŸ‘‰ base_class ğŸ‘ˆ{
Q_OBJECT
protected:
static auto & INST_STORE() {
    static qtgql::bases::ObjectStore<ğŸ‘‰ type.name ğŸ‘ˆ> _store;
    return _store;
}

ğŸ‘‰ macros.concrete_type_fields(type) ğŸ‘ˆ
public:
inline static const QString TYPE_NAME = "ğŸ‘‰ type.name ğŸ‘ˆ";

explicit ğŸ‘‰ type.name ğŸ‘ˆ (QObject* parent = nullptr)
: qtgql::bases::ğŸ‘‰ base_class ğŸ‘ˆ::ğŸ‘‰ base_class ğŸ‘ˆ(parent) {};


static std::shared_ptr<ğŸ‘‰ type.name ğŸ‘ˆ> from_json(const QJsonObject& data,
                                 const qtgql::bases::SelectionsConfig &config,
                                 const qtgql::bases::OperationMetadata& metadata){
if (data.isEmpty()){
    return {};
}
auto inst = std::make_shared<ğŸ‘‰ type.name ğŸ‘ˆ>();
{% for f in type.fields -%}
{% set assign_to %} inst->ğŸ‘‰ f.private_name ğŸ‘ˆ {% endset %}
ğŸ‘‰macros.deserialize_field(f, assign_to)ğŸ‘ˆ
{% endfor %}
{% if type.id_is_optional %}
if (inst->id) {
  auto record = qtgql::bases::NodeRecord(node = inst, retainers = set())
                    .retain(metadata.operation_name)
                        cls.INST_STORE.add_record(record)
}
{% elif type.has_id_field and not type.id_is_optional %}
auto record = std::make_shared<qtgql::bases::NodeRecord<ğŸ‘‰ type.name ğŸ‘ˆ>>(inst);
record->retain(metadata.operation_id);
INST_STORE().add_record(record);
{% endif %}
return inst;
};

void loose(const qtgql::bases::OperationMetadata &metadata){throw "not implemented";};
void update(const QJsonObject &data,
            const qtgql::bases::SelectionsConfig &selections){throw "not implemented";};

};
{% endfor %}

// ----------------------------------------- INPUT OBJECTS -----------------------------------------

{% for type in context.input_objects %}
/*
 * ğŸ‘‰ type.docstring ğŸ‘ˆ
 */

struct ğŸ‘‰type.nameğŸ‘ˆ: QObject{
{% for f in type.fields %}
ğŸ‘‰f.annotationğŸ‘ˆ m_ğŸ‘‰f.nameğŸ‘ˆ;
{% endfor -%}

ğŸ‘‰type.nameğŸ‘ˆ(QObject* parent, {% for f in type.fields %} ğŸ‘‰f.nameğŸ‘ˆ: ğŸ‘‰f.annotationğŸ‘ˆ {% endfor %}): QObject::QObject(parent){
    {% for f in type.fields %}
    m_ğŸ‘‰f.nameğŸ‘ˆ = ğŸ‘‰f.nameğŸ‘ˆ;
    {% endfor -%}
};
QJsonObject to_json(){
    ret = {}
    {% for f in type.fields %}{% set attr_name %}self.ğŸ‘‰f.nameğŸ‘ˆ{% endset %}
    if ğŸ‘‰attr_nameğŸ‘ˆ:
    ret['ğŸ‘‰f.nameğŸ‘ˆ'] = ğŸ‘‰f.json_repr(attr_name)ğŸ‘ˆ
    {% endfor %}
    return ret
};
}
{% endfor %}

}