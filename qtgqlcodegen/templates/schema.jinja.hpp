{%- from "macros/concrete_type_fields.jinja.hpp" import concrete_type_fields -%}
{%- from "macros/serialize_input_variable.jinja.hpp" import  serialize_input_variable -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <QJsonArray>
#include <memory>

#include <qtgql/bases/bases.hpp>
{% for dep in context.dependencies -%}
ğŸ‘‰ dep ğŸ‘ˆ
{% endfor %}

#if defined(ğŸ‘‰context.config.shared_lib_export_definition ğŸ‘ˆ)
#define ğŸ‘‰context.export_macroğŸ‘ˆ Q_DECL_EXPORT
#else
#define ğŸ‘‰context.export_macroğŸ‘ˆ Q_DECL_IMPORT
#endif

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ{
{% if context.enums %}
// ---------- Enums ----------

class Enums{
    Q_GADGET

public:
{% for enum in context.enums %}
enum ğŸ‘‰enum.nameğŸ‘ˆ{
{% for member in enum.members -%}
ğŸ‘‰member.nameğŸ‘ˆ = ğŸ‘‰member.indexğŸ‘ˆ,
{% endfor %}
};
Q_ENUM(ğŸ‘‰enum.nameğŸ‘ˆ)
struct ğŸ‘‰enum.map_nameğŸ‘ˆ{
Q_GADGET
public:
inline static const std::vector<std::pair<QString, ğŸ‘‰enum.nameğŸ‘ˆ>> members = {
        {% for member in enum.members -%}
        {"ğŸ‘‰member.nameğŸ‘ˆ", ğŸ‘‰enum.nameğŸ‘ˆ::ğŸ‘‰member.nameğŸ‘ˆ},
        {% endfor %}
};
    GraphQLEnum_MACRO(ğŸ‘‰enum.nameğŸ‘ˆ)
};

{% endfor %}
};
{% endif %}

// ---------- INPUT OBJECTS ----------
{% for type in context.input_objects -%}
/*
 * ğŸ‘‰ type.docstring ğŸ‘ˆ
 */
struct ğŸ‘‰type.nameğŸ‘ˆ{

public:
{% for arg in type.fields -%}
{% if arg.type.is_optional -%}
std::optional<ğŸ‘‰ arg.type.type_name() ğŸ‘ˆ> ğŸ‘‰ arg.name ğŸ‘ˆ = {};
{% else -%}
ğŸ‘‰ arg.type.type_name() ğŸ‘ˆ ğŸ‘‰ arg.name ğŸ‘ˆ;
{% endif -%}
{% endfor -%}
[[nodiscard]] QJsonObject to_json() const{
    auto __ret = QJsonObject();
    {% for arg in type.fields -%}
    ğŸ‘‰serialize_input_variable("__ret", arg, attr_name=arg.name, json_name=arg.name)ğŸ‘ˆ
    {% endfor -%}
    return __ret;
}

template<typename... Args>
static ğŸ‘‰type.type_name()ğŸ‘ˆ create(Args... args){
    return std::make_shared<ğŸ‘‰type.nameğŸ‘ˆ>(args...);
}


};
{% endfor %}

// Forward references
{% for type in context.types -%}
class ğŸ‘‰ type.name ğŸ‘ˆ;
{% endfor %}

// ---------- Interfaces ----------
{% for interface in context.interfaces -%}
class ğŸ‘‰context.export_macroğŸ‘ˆ  ğŸ‘‰ interface.name ğŸ‘ˆ {% for base in interface.bases %} {%if loop.first %}: {% endif %} public ğŸ‘‰ base.name ğŸ‘ˆ {% if not loop.last %}, {% endif %}{% endfor %}{
Q_OBJECT

ğŸ‘‰ concrete_type_fields(interface) ğŸ‘ˆ

{% if interface.is_node_interface -%}
static auto & ENV_CACHE() {
        static auto cache = qtgql::bases::Environment::get_env_strict("ğŸ‘‰ context.config.env_name ğŸ‘ˆ")->get_cache();
        return cache;
}
{% endif %}
};
{% endfor %}

// ---------- Object Types ----------

{% for type in context.types %}
{%- set base_class -%}{% if type. implements_node %}NodeInterfaceABC{% else %}ObjectTypeABC{% endif %}{%- endset -%}
class ğŸ‘‰context.export_macroğŸ‘ˆ  ğŸ‘‰ type.name ğŸ‘ˆ {% for base in type.bases %}{%if loop.first%}: {% endif %} public ğŸ‘‰ base.name ğŸ‘ˆ {% if not loop.last %}, {% endif %}{% endfor %}{
Q_OBJECT
ğŸ‘‰ concrete_type_fields(type) ğŸ‘ˆ
public:
{% if type.is_root %} {# root types should be singletons #}
[[nodiscard]] static std::shared_ptr<ğŸ‘‰ type.name ğŸ‘ˆ> instance(){
    static std::weak_ptr<ğŸ‘‰ type.name ğŸ‘ˆ> observer_inst;
    if (observer_inst.expired()){
        auto ret = std::make_shared<ğŸ‘‰ type.name ğŸ‘ˆ>();
        observer_inst = ret;
        return ret;
    }
    return observer_inst.lock();
}
{% else %}
QTGQL_STATIC_MAKE_SHARED(ğŸ‘‰ type.name ğŸ‘ˆ)
{% endif %}

ğŸ‘‰ type.name ğŸ‘ˆ()= default;

public:
inline const QString & __typename() const final{
static const QString ret = "ğŸ‘‰ type.name ğŸ‘ˆ";
return ret;
};
};
{% endfor %}

}