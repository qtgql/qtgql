{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include <QObject>
#include <QJsonObject>
#include <memory>
#include <qtgqlobjecttype.hpp>
#include <qtgqlmetadata.hpp>
#include <qtgqlconstants.hpp>

namespace ğŸ‘‰context.config.env_nameğŸ‘ˆ{
{% macro props(type) %}
protected:

{% for f in type.fields -%}
ğŸ‘‰f.annotationğŸ‘ˆ ğŸ‘‰f.private_nameğŸ‘ˆ = ğŸ‘‰f.default_valueğŸ‘ˆ;
{% endfor %}
signals:
{%for f in type.fields -%}
void ğŸ‘‰f.signal_nameğŸ‘ˆ();
{% endfor %}

public:
{%for f in type.fields %}
const ğŸ‘‰f.annotationğŸ‘ˆ & ğŸ‘‰f.getter_nameğŸ‘ˆ() const {
    return ğŸ‘‰f.private_nameğŸ‘ˆ;
}
void ğŸ‘‰f.setter_nameğŸ‘ˆ(const ğŸ‘‰f.annotationğŸ‘ˆ &v)
{
  ğŸ‘‰f.private_nameğŸ‘ˆ = v;
  emit ğŸ‘‰f.signal_nameğŸ‘ˆ();
};
{% endfor %}
{% endmacro %}
// ----------- Object Types -----------
{% for type in context.types %}
{%- set base_class -%}{% if type.has_id_field %}QtGqlObjectTypeABCWithID{% else %}QtGqlObjectTypeABC{% endif %}{%- endset -%}
class ğŸ‘‰ type.name ğŸ‘ˆ : public qtgql::ğŸ‘‰ base_class ğŸ‘ˆ{
protected:
static auto & INST_STORE() {
    static qtgql::QGraphQLObjectStore<ğŸ‘‰ type.name ğŸ‘ˆ> _store;
    return _store;
}

ğŸ‘‰ props(type) ğŸ‘ˆ
public:
inline static const QString TYPE_NAME = "ğŸ‘‰ type.name ğŸ‘ˆ";
ğŸ‘‰type.nameğŸ‘ˆ (QObject* parent = nullptr)
: qtgql::ğŸ‘‰ base_class ğŸ‘ˆ::ğŸ‘‰ base_class ğŸ‘ˆ(parent) {};


static std::shared_ptr<ğŸ‘‰type.nameğŸ‘ˆ> from_json(const QJsonObject& data,
                                 const qtgql::SelectionsConfig& config,
                                 const qtgql::OperationMetadata& metadata){
auto inst = std::make_shared<ğŸ‘‰type.nameğŸ‘ˆ>();
{% for f in type.fields -%}
{% set assign_to %} inst->ğŸ‘‰f.private_nameğŸ‘ˆ {% endset %}
ğŸ‘‰macros.deserialize_field(f, assign_to)ğŸ‘ˆ
{% endfor %}

{% if type.id_is_optional %}
if (inst->id) {
  auto record = NodeRecord(node = inst, retainers = set())
                    .retain(metadata.operation_name)
                        cls.INST_STORE.add_record(record)
}
{% elif type.has_id_field and not type.id_is_optional %}
auto record = std::make_shared<qtgql::NodeRecord<ğŸ‘‰ type.name ğŸ‘ˆ>>(inst);
record->retain(metadata.operation_name);
INST_STORE().add_record(record);
{% endif %}
return inst;
  };
{% endfor %}

void loose(const qtgql::OperationMetadata &metadata){throw "not implemented";};
void update(const QJsonObject &data,
            const qtgql::SelectionsConfig &selections){throw "not implemented";};

};

}