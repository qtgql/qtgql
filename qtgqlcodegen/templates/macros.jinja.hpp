
{% macro concrete_type_fields(type) -%}
public:
{% for f in type.unique_fields -%}
ğŸ‘‰ f.type_with_args ğŸ‘ˆ ğŸ‘‰ f.private_name ğŸ‘ˆ = ğŸ‘‰ f.type.default_value ğŸ‘ˆ;
{% endfor %}
signals:
{%for f in type.unique_fields -%}
void ğŸ‘‰ f.signal_name ğŸ‘ˆ();
{% endfor %}

public:
{%for f in type.unique_fields %}
[[nodiscard]] const ğŸ‘‰ f.type.fget_type ğŸ‘ˆ &ğŸ‘‰ f.getter_name ğŸ‘ˆ(
        {%- if f.arguments -%}ğŸ‘‰ f.arguments_type ğŸ‘ˆ & args {% endif -%}
        ) {%- if f.type.getter_is_constable -%}const{% endif %}{
{%- if f.arguments -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ.at(args){% endset %}
{% else -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ{% endset %}
{% endif -%}
{% if f.is_custom_scalar -%}
return ğŸ‘‰ f_private_name ğŸ‘ˆ.to_qt();
{% else -%}
return ğŸ‘‰ f_private_name ğŸ‘ˆ;
{% endif -%}
}
void ğŸ‘‰ f.setter_name ğŸ‘ˆ(const ğŸ‘‰ f.type.member_type ğŸ‘ˆ &v {% if f.arguments %}, ğŸ‘‰ f.arguments_type ğŸ‘ˆ & args {% endif %})
{
{%- if f.arguments -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ.at(args){% endset %}
{% else -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ{% endset %}
{% endif -%}
ğŸ‘‰ f_private_name ğŸ‘ˆ = v;
emit ğŸ‘‰ f.signal_name ğŸ‘ˆ();
};
{% endfor %}
{% endmacro -%}

{% macro initialize_proxy_field(field, operation_pointer = "operation") -%}
{%set instance_of_concrete -%}
{% if field.is_root -%}
concrete
{% else -%}
m_inst->ğŸ‘‰field.concrete.getter_name ğŸ‘ˆ()
{% endif -%}{% endset -%}

{% if field.type.is_object_type  and field.type.is_optional %}
if (ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
}
else{
ğŸ‘‰field.private_nameğŸ‘ˆ = nullptr;
}
{% elif field.type.is_object_type %}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
{% elif field.type.is_model and field.type.is_model.is_object_type %}
auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ*>>();
for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ.value(metadata.operation_id)){
init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(new ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, node));
}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰ field.type_name ğŸ‘ˆ(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
{% endif %}
{% endmacro %}