
{% macro concrete_type_fields(type) -%}
protected:
{% for f in type.fields -%}
ğŸ‘‰ f.member_type ğŸ‘ˆ ğŸ‘‰ f.private_name ğŸ‘ˆ = ğŸ‘‰ f.default_value ğŸ‘ˆ;
{% endfor %}
signals:
{%for f in type.fields -%}
void ğŸ‘‰ f.signal_name ğŸ‘ˆ();
{% endfor %}

public:
{%for f in type.fields %}
{% if f.is_custom_scalar %}
const ğŸ‘‰ f.is_custom_scalar.type_for_proxy ğŸ‘ˆ & ğŸ‘‰ f.getter_name ğŸ‘ˆ() {
return ğŸ‘‰ f.private_name ğŸ‘ˆ.to_qt();
}
{% else %}
const ğŸ‘‰ f.member_type ğŸ‘ˆ & ğŸ‘‰ f.getter_name ğŸ‘ˆ() const {
return ğŸ‘‰ f.private_name ğŸ‘ˆ;
}
{% endif %}
void ğŸ‘‰ f.setter_name ğŸ‘ˆ(const ğŸ‘‰ f.member_type ğŸ‘ˆ &v)
{
ğŸ‘‰ f.private_name ğŸ‘ˆ = v;
emit ğŸ‘‰ f.signal_name ğŸ‘ˆ();
};
{% endfor %}
{% endmacro -%}



{% macro deserialize_field(f, assign_to, include_selection_check = True, config_name = "config", metadata_name = "metadata",
                           do_after_deserialized = "") -%}

if ({% if include_selection_check %}ğŸ‘‰config_nameğŸ‘ˆ.selections.contains("ğŸ‘‰f.nameğŸ‘ˆ") && {% endif %} !data.value("ğŸ‘‰f.nameğŸ‘ˆ").isNull()){
{% if f.type.is_object_type -%}

ğŸ‘‰ assign_to ğŸ‘ˆ = ğŸ‘‰f.type.is_object_type.nameğŸ‘ˆ::from_json(data.value("ğŸ‘‰f.nameğŸ‘ˆ").toObject(),
{% if include_selection_check -%}
ğŸ‘‰config_nameğŸ‘ˆ.selections.value("ğŸ‘‰f.nameğŸ‘ˆ")
{% else -%}
ğŸ‘‰config_nameğŸ‘ˆ
{% endif -%}, ğŸ‘‰metadata_nameğŸ‘ˆ);

{% elif f.type.is_interface -%}
if field_data:
        ğŸ‘‰ assign_to ğŸ‘ˆ = ğŸ‘‰f.type.is_interface.nameğŸ‘ˆ.from_dict(
        parent,
        field_data,
        inner_config,
        ğŸ‘‰metadata_nameğŸ‘ˆ,
    )
{% elif f.type.is_model -%}
{% if f.type.is_model.is_object_type -%}
QList<ğŸ‘‰f.type.is_model.member_typeğŸ‘ˆ> obj_list;
for (const auto& node: data.value("ğŸ‘‰f.nameğŸ‘ˆ").toArray()){
    obj_list.append(ğŸ‘‰ f.type.is_model.is_object_type.name ğŸ‘ˆ::from_json(node.toObject(), ğŸ‘‰config_nameğŸ‘ˆ.selections.value("ğŸ‘‰f.nameğŸ‘ˆ"), ğŸ‘‰metadata_nameğŸ‘ˆ));
};
ğŸ‘‰ assign_to ğŸ‘ˆ.insert(ğŸ‘‰metadata_nameğŸ‘ˆ.operation_id, obj_list);

{% elif f.type.is_model.is_interface -%}
ğŸ‘‰ assign_to ğŸ‘ˆ = qtgql::ListModel(
    parent=parent,
    data=[ğŸ‘‰f.type.is_model.is_interface.nameğŸ‘ˆ.from_dict(parent, data=node, config=inner_config, metadata=ğŸ‘‰metadata_nameğŸ‘ˆ) for
          node in field_data],
)
{% elif f.type.is_model.is_union -%}
model_data = []
for node in field_data:
    type_name = node['__typename']
    choice = inner_ğŸ‘‰config_nameğŸ‘ˆ.choices[type_name]
    model_data.append(
        __TYPE_MAP__[type_name].from_dict(self, node,
                                          choice, ğŸ‘‰metadata_nameğŸ‘ˆ)
    )
ğŸ‘‰ assign_to ğŸ‘ˆ = qtgql::ListModel(parent, data=model_data)
{% endif %}
{% elif f.type.is_builtin_scalar -%}
ğŸ‘‰ assign_to ğŸ‘ˆ = data.value("ğŸ‘‰f.nameğŸ‘ˆ").ğŸ‘‰ f.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ;
{% elif f.is_custom_scalar -%}
ğŸ‘‰ assign_to ğŸ‘ˆ = ğŸ‘‰ f.is_custom_scalar.type_name ğŸ‘ˆ();
ğŸ‘‰ assign_to ğŸ‘ˆ.deserialize(data.value("ğŸ‘‰f.nameğŸ‘ˆ"));
{% elif f.type.is_enum -%}
ğŸ‘‰ assign_to ğŸ‘ˆ = Enums::ğŸ‘‰f.type.is_enum.map_nameğŸ‘ˆ::by_name(data.value("ğŸ‘‰f.nameğŸ‘ˆ").toString());
{% elif f.type.is_union -%}
type_name = field_data['__typename']
choice = inner_ğŸ‘‰config_nameğŸ‘ˆ.choices[type_name]
ğŸ‘‰ assign_to ğŸ‘ˆ = __TYPE_MAP__[type_name].from_dict(parent, field_data, choice, ğŸ‘‰metadata_nameğŸ‘ˆ);
{% endif -%} ğŸ‘‰ do_after_deserialized ğŸ‘ˆ
};
{%- endmacro %}


{% macro update_concrete_field(f, fset_name, private_name, config_name= "config", include_selection_check=True) -%}

if ({% if include_selection_check %}ğŸ‘‰config_nameğŸ‘ˆ.selections.contains("ğŸ‘‰f.nameğŸ‘ˆ") && {% endif %} !data.value("ğŸ‘‰f.nameğŸ‘ˆ").isNull()){
{% if f.type.is_builtin_scalar %}
auto new_ğŸ‘‰f.nameğŸ‘ˆ = data.value("ğŸ‘‰f.nameğŸ‘ˆ").ğŸ‘‰ f.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ;
if (ğŸ‘‰private_nameğŸ‘ˆ != new_ğŸ‘‰f.nameğŸ‘ˆ){
    ğŸ‘‰fset_nameğŸ‘ˆ(new_ğŸ‘‰f.nameğŸ‘ˆ);
}
{% elif f.type.is_custom_scalar %}
auto new_ğŸ‘‰f.nameğŸ‘ˆ = ğŸ‘‰ f.is_custom_scalar.type_name ğŸ‘ˆ();
new_ğŸ‘‰f.nameğŸ‘ˆ.deserialize(data.value("ğŸ‘‰f.nameğŸ‘ˆ"));
if (ğŸ‘‰private_nameğŸ‘ˆ != new_ğŸ‘‰f.nameğŸ‘ˆ){
    ğŸ‘‰fset_nameğŸ‘ˆ(new_ğŸ‘‰f.nameğŸ‘ˆ);
}
{% elif f.type.is_object_type %}
auto ğŸ‘‰f.nameğŸ‘ˆ_inner_config = config.selections.value("person");

{% if f.can_select_id %}
auto ğŸ‘‰f.nameğŸ‘ˆ_data = data.value("person").toObject();
if (ğŸ‘‰private_nameğŸ‘ˆ && ğŸ‘‰private_nameğŸ‘ˆ->get_id() == ğŸ‘‰f.nameğŸ‘ˆ_data.value("id").toString()){
ğŸ‘‰private_nameğŸ‘ˆ->update(ğŸ‘‰f.nameğŸ‘ˆ_data, ğŸ‘‰f.nameğŸ‘ˆ_inner_config, metadata);
}
    else{
ğŸ‘‰fset_nameğŸ‘ˆ(ğŸ‘‰f.type.is_object_type.nameğŸ‘ˆ::from_json(
        ğŸ‘‰f.nameğŸ‘ˆ_data,
        ğŸ‘‰f.nameğŸ‘ˆ_inner_config,
        metadata
));
    }
{% endif %}
ğŸ‘‰fset_nameğŸ‘ˆ(ğŸ‘‰f.type.is_object_type.nameğŸ‘ˆ::from_json(
        data.value("ğŸ‘‰f.nameğŸ‘ˆ").toObject(),
        ğŸ‘‰f.nameğŸ‘ˆ_inner_config,
        metadata
));


{% else %}
throw qtgql::exceptions::NotImplementedError({"ğŸ‘‰f.typeğŸ‘ˆ is not supporting updates ATM"});
{% endif %}
}
{% if f.type.is_optional() %}
else {
ğŸ‘‰fset_nameğŸ‘ˆ({});
}
{% endif %}
{%- endmacro %}


{% macro initialize_proxy_field(field) %}
{%set instance_of_concrete -%}
{% if field.is_root %}
concrete
{% else %}
m_inst->ğŸ‘‰field.definition.getter_name ğŸ‘ˆ()
{% endif %}{% endset -%}

{% if field.type.is_object_type  and field.type.is_optional() %}
if (ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(this, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ, metadata);
}
else{
ğŸ‘‰field.private_nameğŸ‘ˆ = nullptr;
}
{% elif field.type.is_object_type %}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(this, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ, metadata);
{% elif field.type.is_model.is_object_type %}
auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ*>>();
for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ.value(metadata.operation_id)){
init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(new ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ(this, node, metadata));
}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰ field.type_name ğŸ‘ˆ(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
{% endif %}
{% endmacro %}