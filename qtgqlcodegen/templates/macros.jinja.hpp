
{% macro concrete_type_fields(type) -%}
public:
{% for f in type.unique_fields -%}
ğŸ‘‰ f.type_with_args ğŸ‘ˆ ğŸ‘‰ f.private_name ğŸ‘ˆ = ğŸ‘‰ f.type.default_value ğŸ‘ˆ;
{% endfor %}
signals:
{%for f in type.unique_fields -%}
void ğŸ‘‰ f.signal_name ğŸ‘ˆ();
{% endfor %}

public:
{%for f in type.unique_fields %}
[[nodiscard]] const ğŸ‘‰ f.type.fget_type ğŸ‘ˆ & ğŸ‘‰ f.getter_name ğŸ‘ˆ({%- if f.arguments -%}ğŸ‘‰ f.arguments_type ğŸ‘ˆ & args {% endif %}) const{
{%- if f.arguments -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ.at(args){% endset %}
{% else -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ{% endset %}
{% endif -%}
{% if f.is_custom_scalar -%}
return ğŸ‘‰ f_private_name ğŸ‘ˆ.to_qt();
{% else -%}
return ğŸ‘‰ f_private_name ğŸ‘ˆ;
{% endif -%}
}
void ğŸ‘‰ f.setter_name ğŸ‘ˆ(const ğŸ‘‰ f.type.member_type ğŸ‘ˆ &v {% if f.arguments %}, ğŸ‘‰ f.arguments_type ğŸ‘ˆ & args {% endif %})
{
{%- if f.arguments -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ.at(args){% endset %}
{% else -%}
{% set f_private_name %}ğŸ‘‰ f.private_name ğŸ‘ˆ{% endset %}
{% endif -%}
ğŸ‘‰ f_private_name ğŸ‘ˆ = v;
emit ğŸ‘‰ f.signal_name ğŸ‘ˆ();
};
{% endfor %}
{% endmacro -%}

{% macro deserialize_field(f, setter_name, operation_pointer = "operation",
                           do_after_deserialized = "") -%}

if (!data.value("ğŸ‘‰f.nameğŸ‘ˆ").isNull()){
{% if f.type.is_object_type -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰f.concrete.type.deserializer_nameğŸ‘ˆ(data.value("ğŸ‘‰f.nameğŸ‘ˆ").toObject(), ğŸ‘‰operation_pointerğŸ‘ˆ));

{% elif f.type.is_interface -%}
if field_data:
        ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰f.type.is_interface.nameğŸ‘ˆ.from_dict(
        parent,
        field_data,
        inner_config,
        ğŸ‘‰operation_pointerğŸ‘ˆ,
    ))
{% elif f.type.is_model -%}
{% if f.type.is_model.is_object_type -%}
QList<ğŸ‘‰f.type.is_model.member_typeğŸ‘ˆ> obj_list;
for (const auto& node: data.value("ğŸ‘‰f.nameğŸ‘ˆ").toArray()){
    obj_list.append(ğŸ‘‰ f.type.is_model.is_object_type.deserializer_name ğŸ‘ˆ(node.toObject(), ğŸ‘‰operation_pointerğŸ‘ˆ));
};
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ.operation_id, obj_list);

{% elif f.type.is_model.is_interface -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(qtgql::ListModel(
    parent=parent,
    data=[ğŸ‘‰f.type.is_model.is_interface.nameğŸ‘ˆ.from_dict(parent, data=node, config=inner_config, metadata=ğŸ‘‰operation_pointerğŸ‘ˆ) for
          node in field_data],))
{% elif f.type.is_model.is_union -%}
model_data = []
for node in field_data:
    type_name = node['__typename']
    choice = inner_ğŸ‘‰config_nameğŸ‘ˆ.choices[type_name]
    model_data.append(
        __TYPE_MAP__[type_name].from_dict(self, node,
                                          choice, ğŸ‘‰operation_pointerğŸ‘ˆ)
    )
ğŸ‘‰ setter_name ğŸ‘ˆ(qtgql::ListModel(parent, data=model_data))
{% endif %}
{% elif f.type.is_builtin_scalar -%}
{% if f.type.is_void -%}
/* deliberately empty */
{% else -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(data.value("ğŸ‘‰f.nameğŸ‘ˆ").ğŸ‘‰ f.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ);
{% endif %}
{% elif f.is_custom_scalar -%}
ğŸ‘‰ f.nameğŸ‘ˆreplace = ğŸ‘‰ f.is_custom_scalar.type_name ğŸ‘ˆ();
ğŸ‘‰ f.nameğŸ‘ˆreplace = ğŸ‘‰ f.is_custom_scalar.type_name ğŸ‘ˆ().deserialize(data.value("ğŸ‘‰f.nameğŸ‘ˆ"));
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰ f.nameğŸ‘ˆreplace);
{% elif f.type.is_enum -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(Enums::ğŸ‘‰f.type.is_enum.map_nameğŸ‘ˆ::by_name(data.value("ğŸ‘‰f.nameğŸ‘ˆ").toString());
{% elif f.type.is_union -%}
type_name = field_data['__typename']
choice = inner_ğŸ‘‰config_nameğŸ‘ˆ.choices[type_name]
ğŸ‘‰ setter_name ğŸ‘ˆ(__TYPE_MAP__[type_name].from_dict(parent, field_data, choice, ğŸ‘‰operation_pointerğŸ‘ˆ));
{% endif -%} ğŸ‘‰ do_after_deserialized ğŸ‘ˆ
};
{%- endmacro %}


{% macro update_concrete_field(f,f_concrete, fset_name, private_name, operation_pointer="operation") -%}
if (!data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").isNull()){
{% if f.type.is_builtin_scalar -%}
{% if f.type.is_void -%}
/* deliberately empty */
{% else -%}
auto new_ğŸ‘‰f_concrete.nameğŸ‘ˆ = data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").ğŸ‘‰ f.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ;
if (inst->ğŸ‘‰private_nameğŸ‘ˆ != new_ğŸ‘‰f_concrete.nameğŸ‘ˆ){
    inst->ğŸ‘‰fset_nameğŸ‘ˆ(new_ğŸ‘‰f_concrete.nameğŸ‘ˆ);
}
{% endif %}
{% elif f.type.is_custom_scalar %}
auto new_ğŸ‘‰f_concrete.nameğŸ‘ˆ = ğŸ‘‰ f.is_custom_scalar.type_name ğŸ‘ˆ();
new_ğŸ‘‰f_concrete.nameğŸ‘ˆ.deserialize(data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ"));
if (inst->ğŸ‘‰private_nameğŸ‘ˆ != new_ğŸ‘‰f_concrete.nameğŸ‘ˆ){
    inst->ğŸ‘‰fset_nameğŸ‘ˆ(new_ğŸ‘‰f_concrete.nameğŸ‘ˆ);
}
{% elif f.type.is_object_type %}
{% if f_concrete.type.implements_node %}
auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_data = data.value("person").toObject();
if (inst->ğŸ‘‰private_nameğŸ‘ˆ && inst->ğŸ‘‰private_nameğŸ‘ˆ->get_id() == ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.value("id").toString()){
ğŸ‘‰f_concrete.type.updater_nameğŸ‘ˆ(inst->ğŸ‘‰private_nameğŸ‘ˆ, ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,  ğŸ‘‰operation_pointerğŸ‘ˆ);
}
    else{
inst->ğŸ‘‰fset_nameğŸ‘ˆ(ğŸ‘‰f.type.is_object_type.nameğŸ‘ˆ::from_json(
        ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,
ğŸ‘‰operation_pointerğŸ‘ˆ
));
    }
{% endif %}
inst->ğŸ‘‰fset_nameğŸ‘ˆ(ğŸ‘‰f.type.is_object_type.nameğŸ‘ˆ::from_json(
        data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").toObject(),
ğŸ‘‰operation_pointerğŸ‘ˆ
));


{% else %}
throw qtgql::exceptions::NotImplementedError({"ğŸ‘‰f.type.__class__.__name__ğŸ‘ˆ is not supporting updates ATM"});
{% endif %}
}
{% if f.type.is_optional %}
else {
inst->ğŸ‘‰fset_nameğŸ‘ˆ({});
}
{% endif %}
{%- endmacro %}


{% macro initialize_proxy_field(field, operation_pointer = "operation") -%}
{%set instance_of_concrete -%}
{% if field.is_root -%}
concrete
{% else -%}
m_inst->ğŸ‘‰field.concrete.getter_name ğŸ‘ˆ()
{% endif -%}{% endset -%}

{% if field.type.is_object_type  and field.type.is_optional %}
if (ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
}
else{
ğŸ‘‰field.private_nameğŸ‘ˆ = nullptr;
}
{% elif field.type.is_object_type %}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
{% elif field.type.is_model and field.type.is_model.is_object_type %}
auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ*>>();
for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ.value(metadata.operation_id)){
init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(new ğŸ‘‰field.narrowed_type.nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, node));
}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰ field.type_name ğŸ‘ˆ(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
{% endif %}
{% endmacro %}