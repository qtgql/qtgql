{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include "./schema.hpp"
#include <qtgql/gqlwstransport/gqlwstransport.hpp>
#include <QObject>

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ{
namespace ğŸ‘‰context.nsğŸ‘ˆ{
const auto OPERATION_ID = QUuid::fromString("ğŸ‘‰ context.operation.operation_idğŸ‘ˆ");

{% for t in context.operation.narrowed_types %}
class ğŸ‘‰ t.name ğŸ‘ˆ: public QObject{
/*
ğŸ‘‰ t.doc_fields ğŸ‘ˆ
 */
    Q_OBJECT
{# members #}
{% if context.debug -%}
public: // WARNING: members are public because you have debug=True in your config file.
{% endif %}
std::shared_ptr<ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.definition.name ğŸ‘ˆ> m_inst;
{% for ref in t.references -%}
ğŸ‘‰ref.narrowed_type.nameğŸ‘ˆ *m_ğŸ‘‰ref.nameğŸ‘ˆ = nullptr;
{% endfor %}
{%- for model_field in t.models -%}
ğŸ‘‰ model_field.property_type ğŸ‘ˆ *m_ğŸ‘‰model_field.nameğŸ‘ˆ = nullptr;
{% endfor %}

public:
ğŸ‘‰ t.name ğŸ‘ˆ(QObject* parent, const std::shared_ptr<ğŸ‘‰ t.definition.name ğŸ‘ˆ> &inst ): m_inst{inst}, QObject::QObject(parent){
{% for ref in t.references -%}
{% if ref.type.is_optional() %}
if (m_inst->ğŸ‘‰ref.definition.getter_name ğŸ‘ˆ()){
m_ğŸ‘‰ref.nameğŸ‘ˆ = new ğŸ‘‰ref.narrowed_type.nameğŸ‘ˆ(this, m_inst->ğŸ‘‰ref.definition.getter_name ğŸ‘ˆ());
}
else{
m_ğŸ‘‰ref.nameğŸ‘ˆ = nullptr;
}
{% else %}
m_ğŸ‘‰ref.nameğŸ‘ˆ = new ğŸ‘‰ref.narrowed_type.nameğŸ‘ˆ(this, m_inst->ğŸ‘‰ref.definition.getter_name ğŸ‘ˆ());
{% endif %}
{% endfor %}
{%- for model_field in t.models -%}
auto init_list_ğŸ‘‰ model_field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰model_field.narrowed_type.nameğŸ‘ˆ*>>();
for (const auto & node: m_inst->ğŸ‘‰model_field.definition.getter_name ğŸ‘ˆ().value(OPERATION_ID)){
    init_list_ğŸ‘‰ model_field.name ğŸ‘ˆ->append(new ğŸ‘‰model_field.narrowed_type.nameğŸ‘ˆ(this, node));
}
m_ğŸ‘‰model_field.nameğŸ‘ˆ = new ğŸ‘‰ model_field.property_type ğŸ‘ˆ(this, std::move(init_list_ğŸ‘‰ model_field.name ğŸ‘ˆ));
{% endfor -%}
}
{%- for f in t.fields.values() %}
{% if f.type.is_object_type or f.type.is_model %}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ * ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ() const {
    return m_ğŸ‘‰f.nameğŸ‘ˆ;
{% else %}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ & ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ() const {
    {% if f.type.is_object_type %}
    return *m_ğŸ‘‰f.nameğŸ‘ˆ;
    {% else %}
    return m_inst->ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ();
    {% endif %}
{% endif %}
};
{% endfor -%}
};
{% endfor %}

class ğŸ‘‰ context.operation.name ğŸ‘ˆ: public qtgql::gqlwstransport::OperationHandlerABC {
    Q_OBJECT
Q_PROPERTY(const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ* data READ get_data NOTIFY dataChanged);

ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ *m_data = nullptr;

inline const QString &ENV_NAME() override{
    static const auto ret = QString("ğŸ‘‰ context.config.env_name ğŸ‘ˆ");
    return ret;
    }

inline const qtgql::bases::OperationMetadata & OPERATION_METADATA() override{
auto static ret = qtgql::bases::OperationMetadata{
        OPERATION_ID,
        {ğŸ‘‰ context.operation.root_field.as_conf_string() ğŸ‘ˆ}
};
return ret;
};
public:
ğŸ‘‰ context.operation.name ğŸ‘ˆ(): qtgql::gqlwstransport::OperationHandlerABC(qtgql::gqlwstransport::GqlWsTrnsMsgWithID(qtgql::gqlwstransport::OperationPayload(
        {%- for line in context.operation.query.splitlines() %}"ğŸ‘‰ line ğŸ‘ˆ"{% endfor -%}
        ), OPERATION_ID)){};

inline const QUuid &operation_id() const override{
return OPERATION_ID;
}


void on_next(const QJsonObject &message) override{
    if (!m_data && message.contains("data")){
        auto data = message.value("data").toObject();
        if (data.contains("ğŸ‘‰ context.operation.root_field.name ğŸ‘ˆ")){
            m_data = new ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ(this,
ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ context.operation.root_field.definition.type.is_object_type.name ğŸ‘ˆ::from_json(
        data.value("ğŸ‘‰ context.operation.root_field.name ğŸ‘ˆ").toObject(), OPERATION_METADATA().selections, OPERATION_METADATA())
);
        }
    }
}
inline const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ* get_data(){
    return m_data;
}

{% if context.operation.variables %}
void setVariables(
{% for var in context.operation.variables -%}
const std::optional<ğŸ‘‰ var.type.member_type ğŸ‘ˆ>  ğŸ‘‰ var.name ğŸ‘ˆ {% if not loop.last %},{% endif %}
{% endfor -%}){
{% for var in context.operation.variables %}
if (ğŸ‘‰ var.name ğŸ‘ˆ.has_value()){
    m_variables.insert("ğŸ‘‰ var.name ğŸ‘ˆ",  ğŸ‘‰ var.json_repr() ğŸ‘ˆ);
}
{% endfor %}
}
{% endif %}

signals:
void dataChanged();

};
};
};

