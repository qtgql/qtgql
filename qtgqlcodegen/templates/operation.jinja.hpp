{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include "./schema.hpp"
#include "qtgqloperationhandler.hpp"
namespace ğŸ‘‰context.nsğŸ‘ˆ{



{% for t in context.operation.narrowed_types %}
class ğŸ‘‰ t.name ğŸ‘ˆ{
/*
ğŸ‘‰ t.doc_fields ğŸ‘ˆ
 */
    Q_GADGET
ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.definition.name ğŸ‘ˆ* m_inst;

public:
{%- for f in t.fields.values() %}
const ğŸ‘‰ f.type.annotation ğŸ‘ˆ & ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ() const {
    return m_inst->ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ();
};
{% endfor -%}
};
{% endfor %}

class ğŸ‘‰ context.operation.name ğŸ‘ˆ: qtgql::QtGqlOperationHandlerABC {
    Q_OBJECT
Q_PROPERTY(ğŸ‘‰ context.operation.root_field.property_annotation ğŸ‘ˆ data MEMBER m_data NOTIFY dataChanged);

ğŸ‘‰ context.operation.root_field.property_annotation ğŸ‘ˆ m_data;

const QString &ENV_NAME() override{
    static const auto ret = QString("ğŸ‘‰ context.config.env_name ğŸ‘ˆ");
    return ret;
    }
public:
const QUuid &operation_id() const override{
return m_message_template.op_id;
}

const qtgql::OperationMetadata &OPERATION_METADATA() const override{
static auto ret = qtgql::OperationMetadata{
        "ğŸ‘‰ context.operation.name ğŸ‘ˆ",
        {
                ğŸ‘‰ context.operation.root_field.as_conf_string() ğŸ‘ˆ
        }
};
return ret;
}

};

};

