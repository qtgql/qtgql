{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include "./schema.hpp"
#include <qtgql/gqlwstransport/gqlwstransport.hpp>
#include <QObject>

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ::ğŸ‘‰context.nsğŸ‘ˆ{
class ğŸ‘‰ context.operation.name ğŸ‘ˆ;

namespace deserializers{
{% for t in context.operation.narrowed_types -%}
std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> des_ğŸ‘‰ t.concrete.name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}
{% for t in context.interfaces -%}
std::shared_ptr<ğŸ‘‰ t.name ğŸ‘ˆ> des_ğŸ‘‰ t.name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}
};

namespace updaters{
{% for t in context.operation.narrowed_types -%}
void update_ğŸ‘‰ t.concrete.name ğŸ‘ˆ(ğŸ‘‰ t.concrete.member_type ğŸ‘ˆ &inst, const QJsonObject &data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}

};

{% for t in context.operation.narrowed_types %}
class ğŸ‘‰ t.name ğŸ‘ˆ: public QObject{
/*
ğŸ‘‰ t.doc_fields ğŸ‘ˆ
 */
    Q_OBJECT
{% for f in t.fields -%}
Q_PROPERTY(const ğŸ‘‰ f.property_type ğŸ‘ˆ ğŸ‘‰ f.name ğŸ‘ˆ READ ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ NOTIFY ğŸ‘‰ f.concrete.signal_name ğŸ‘ˆ);
{% endfor %}
signals:
{%for f in t.fields -%}
void ğŸ‘‰ f.concrete.signal_name ğŸ‘ˆ();
{% endfor %}

{# members #}
{% if context.debug -%}
public: // WARNING: members are public because you have debug=True in your config file.
{% else %}
protected:
{% endif %}
const std::shared_ptr<ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.concrete.name ğŸ‘ˆ> m_inst;
{% for ref_field in t.references -%}
const ğŸ‘‰ref_field.property_typeğŸ‘ˆ m_ğŸ‘‰ref_field.nameğŸ‘ˆ = {};
{% endfor %}
{%- for model_field in t.models -%}
ğŸ‘‰ model_field.property_type ğŸ‘ˆ m_ğŸ‘‰model_field.nameğŸ‘ˆ;
{% endfor %}

public:
ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation, const std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> &inst);

{%- for f in t.fields %}
{%- if f.type.is_object_type or f.type.is_model %}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ  ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ() const {
    return m_ğŸ‘‰f.nameğŸ‘ˆ;
{%- else -%}
{#- TODO: find a better way to pass the object to QML -#}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ & ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ() const {
    {% if f.type.is_object_type -%}
    return *m_ğŸ‘‰f.nameğŸ‘ˆ;
    {% else -%}
    return m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ();
    {% endif -%}
{%- endif -%}
};
{% endfor -%}
};
{% endfor %}

struct ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ{
{% for var in context.operation.variables -%}
std::optional<ğŸ‘‰ var.type.member_type ğŸ‘ˆ> ğŸ‘‰ var.name ğŸ‘ˆ = {};
{% endfor -%}

    QJsonObject to_json() const{
    QJsonObject ret;
    {% for var in context.operation.variables -%}
    if (ğŸ‘‰ var.name ğŸ‘ˆ.has_value()){
    ret.insert("ğŸ‘‰ var.name ğŸ‘ˆ",  ğŸ‘‰ var.json_repr() ğŸ‘ˆ);
    }
    {% endfor -%}
    return ret;
    }
};

class ğŸ‘‰ context.operation.name ğŸ‘ˆ: public qtgql::gqlwstransport::OperationHandlerABC{
    Q_OBJECT
Q_PROPERTY(const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ data READ ğŸ‘‰ context.operation.root_field.concrete.getter_name ğŸ‘ˆ NOTIFY ğŸ‘‰ context.operation.root_field.concrete.signal_name ğŸ‘ˆ);

ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ m_vars_inst;
std::optional<ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ> ğŸ‘‰ context.operation.root_field.private_name ğŸ‘ˆ = {};



inline const QString &ENV_NAME() override{
    static const auto ret = QString("ğŸ‘‰ context.config.env_name ğŸ‘ˆ");
    return ret;
    }


public:
ğŸ‘‰ context.operation.name ğŸ‘ˆ(): qtgql::gqlwstransport::OperationHandlerABC(qtgql::gqlwstransport::GqlWsTrnsMsgWithID(qtgql::gqlwstransport::OperationPayload(
        {%- for line in context.operation.query.splitlines() %}"ğŸ‘‰ line ğŸ‘ˆ"{% endfor -%}
        ))){
m_message_template.op_id = m_operation_id;
};


QTGQL_STATIC_MAKE_SHARED(ğŸ‘‰ context.operation.name ğŸ‘ˆ)

inline const QUuid & operation_id() const override{
return m_operation_id;
}


void on_next(const QJsonObject &message) override{
    if (!ğŸ‘‰ context.operation.root_field.private_name ğŸ‘ˆ  && message.contains("data")){
        auto data = message.value("data").toObject();
        {% set do_after_deserialized -%}
        ğŸ‘‰ macros.initialize_proxy_field(context.operation.root_field, operation_pointer="this") ğŸ‘ˆ
        {%- endset -%}
        ğŸ‘‰ macros.deserialize_field(context.operation.root_field,  "auto concrete", "this", do_after_deserialized) ğŸ‘ˆ
    }
}
inline const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ ğŸ‘‰ context.operation.root_field.concrete.getter_name ğŸ‘ˆ() const{
    return ğŸ‘‰ context.operation.root_field.concrete.private_name ğŸ‘ˆ.value();
}

{% if context.operation.variables %}
void set_variables(ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ & vars)
m_vars_inst = vars;
m_variables = m_vars_inst.to_json();
}
{% endif %}

signals:
void ğŸ‘‰ context.operation.root_field.concrete.signal_name ğŸ‘ˆ();

};
};

