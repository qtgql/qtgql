{%- from "macros/deserialize_concrete_field.jinja.hpp" import  deserialize_concrete_field -%}
{%- from "macros/proxy_type_fields.jinja.hpp" import  proxy_type_fields -%}
#pragma once
#include "./schema.hpp"
#include <qtgql/gqlwstransport/gqlwstransport.hpp>
#include <QObject>

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ::ğŸ‘‰context.nsğŸ‘ˆ{
class ğŸ‘‰ context.operation.name ğŸ‘ˆ;

namespace deserializers{
{% for t in context.operation.narrowed_types if not t.concrete.is_root -%}
std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> des_ğŸ‘‰ t.name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}
{% for t in context.operation.interfaces -%}
std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> des_ğŸ‘‰ t.name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}
};

namespace updaters{
{% for t in context.operation.narrowed_types -%}
void update_ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ t.concrete.member_type_arg ğŸ‘ˆ inst, const QJsonObject &data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% endfor -%}
};

// ------------ Narrowed Interfaces ------------
{% for t in context.operation.interfaces -%}
class ğŸ‘‰ t.name ğŸ‘ˆ: public QObject{
ğŸ‘‰ proxy_type_fields(t, context) ğŸ‘ˆ
public:
    using QObject::QObject;
{% for f in t.fields -%}
[[nodiscard]] inline virtual const ğŸ‘‰ f.property_type ğŸ‘ˆ  ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ() const {
throw qtgql::exceptions::InterfaceDirectAccessError("ğŸ‘‰t.concrete.nameğŸ‘ˆ");
}
{% endfor %}
public:
[[nodiscard]] virtual const QString & __typename() const{
    throw qtgql::exceptions::InterfaceDirectAccessError("ğŸ‘‰t.concrete.nameğŸ‘ˆ");
}
};
{% endfor %}
// ------------ Narrowed Object types ------------
{% for t in context.operation.narrowed_types %}
class ğŸ‘‰ t.name ğŸ‘ˆ: public ğŸ‘‰ "QObject" if not t.base_interface else t.base_interface.name ğŸ‘ˆ{
ğŸ‘‰ proxy_type_fields(t, context) ğŸ‘ˆ
public:
{% if t.concrete.is_root -%}
ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation);
{% else -%}
ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation, const std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> &inst);
{% endif %}
public:
{% for f in t.fields -%}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ  ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ() const {
{%- if f.type.is_queried_object_type or f.type.is_model or f.type.is_queried_interface %}
return m_ğŸ‘‰f.nameğŸ‘ˆ;
{%- else -%}
return m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ();
{%- endif -%}
};
{% endfor -%}
public:
[[nodiscard]] const QString & __typename() const {% if t.base_interface -%}final{% endif %}{
    return m_inst->__typename();
}
};
{% endfor %}

struct ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ{
{% for var in context.operation.variables -%}
std::optional<ğŸ‘‰ var.type.member_type ğŸ‘ˆ> ğŸ‘‰ var.name ğŸ‘ˆ = {};
{% endfor -%}
    QJsonObject to_json() const{
    QJsonObject __ret;
    {% for var in context.operation.variables -%}
    if (ğŸ‘‰ var.name ğŸ‘ˆ.has_value()){
    __ret.insert("ğŸ‘‰ var.name ğŸ‘ˆ",  ğŸ‘‰ var.json_repr() ğŸ‘ˆ);
    }
    {% endfor -%}
    return __ret;
    }
};

class ğŸ‘‰ context.operation.name ğŸ‘ˆ: public qtgql::gqlwstransport::OperationHandlerABC{
    Q_OBJECT
Q_PROPERTY(const ğŸ‘‰ context.operation.root_type.name ğŸ‘ˆ * data READ data NOTIFY dataChanged);

std::optional<ğŸ‘‰ context.operation.root_type.name ğŸ‘ˆ *> m_data = {};



inline const QString &ENV_NAME() override{
    static const auto ret = QString("ğŸ‘‰ context.config.env_name ğŸ‘ˆ");
    return ret;
    }
signals:
    void dataChanged();

public:
ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ vars_inst;

ğŸ‘‰ context.operation.name ğŸ‘ˆ(): qtgql::gqlwstransport::OperationHandlerABC(qtgql::gqlwstransport::GqlWsTrnsMsgWithID(qtgql::gqlwstransport::OperationPayload(
        {%- for line in context.operation.query.splitlines() %}"ğŸ‘‰ line ğŸ‘ˆ"{% endfor -%}
        ))){
m_message_template.op_id = m_operation_id;
};


QTGQL_STATIC_MAKE_SHARED(ğŸ‘‰ context.operation.name ğŸ‘ˆ)

inline const QUuid & operation_id() const override{
return m_operation_id;
}


void on_next(const QJsonObject &message) override{
    auto data = message.value("data").toObject();
    if (!m_data){
        ğŸ‘‰ context.operation.root_type.updater_nameğŸ‘ˆ(ğŸ‘‰ context.operation.root_type.concrete.nameğŸ‘ˆ::instance(), data, this);
        m_data = new ğŸ‘‰ context.operation.root_type.nameğŸ‘ˆ(this);
        emit dataChanged();
    }
    else{
        ğŸ‘‰ context.operation.root_type.updater_nameğŸ‘ˆ(ğŸ‘‰ context.operation.root_type.concrete.nameğŸ‘ˆ::instance(), data, this);
    }
}

inline const ğŸ‘‰ context.operation.root_type.name ğŸ‘ˆ * data() const{
    if (m_data){
        return m_data.value();
    }
    return nullptr;
}

{% if context.operation.variables %}
void set_variables(ğŸ‘‰ context.operation.generated_variables_type ğŸ‘ˆ vars){
vars_inst = vars;
m_variables = vars_inst.to_json();
}
{% endif %}

};
};

