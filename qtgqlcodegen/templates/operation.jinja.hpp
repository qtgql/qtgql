{% import "macros.jinja.hpp" as macros -%}
#pragma once
#include "./schema.hpp"
#include <qtgql/gqlwstransport/gqlwstransport.hpp>

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ{
namespace ğŸ‘‰context.nsğŸ‘ˆ{

inline const qtgql::bases::OperationMetadata OPERATION_METADATA = qtgql::bases::OperationMetadata{
        "ğŸ‘‰ context.operation.name ğŸ‘ˆ",
        {ğŸ‘‰ context.operation.root_field.as_conf_string() ğŸ‘ˆ}
};


{% for t in context.operation.narrowed_types %}
class ğŸ‘‰ t.name ğŸ‘ˆ{
/*
ğŸ‘‰ t.doc_fields ğŸ‘ˆ
 */
    Q_GADGET
std::shared_ptr<ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.definition.name ğŸ‘ˆ> m_inst;
{% for ref in t.references -%}
std::unique_ptr<ğŸ‘‰ref.narrowed_type.nameğŸ‘ˆ> m_ğŸ‘‰ref.nameğŸ‘ˆ;
{% endfor %}

public:
ğŸ‘‰ t.name ğŸ‘ˆ(const std::shared_ptr<ğŸ‘‰ t.definition.name ğŸ‘ˆ> inst ): m_inst{inst}{
{% for ref in t.references -%}
m_ğŸ‘‰ref.nameğŸ‘ˆ = std::make_unique<ğŸ‘‰ref.narrowed_type.nameğŸ‘ˆ>(m_inst->ğŸ‘‰ref.definition.getter_name ğŸ‘ˆ());
{% endfor %}
}
{%- for f in t.fields.values() %}
[[nodiscard]] inline const ğŸ‘‰ f.property_type ğŸ‘ˆ & ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ() const {
    {% if f.type.is_object_type %}
    return *m_ğŸ‘‰f.nameğŸ‘ˆ;
    {% else %}
    return m_inst->ğŸ‘‰ f.definition.getter_name ğŸ‘ˆ();
    {% endif %}
};
{% endfor -%}
};
{% endfor %}

class ğŸ‘‰ context.operation.name ğŸ‘ˆ: public qtgql::gqlwstransport::OperationHandlerABC {
    Q_OBJECT
Q_PROPERTY(const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ* data READ get_data NOTIFY dataChanged);

std::unique_ptr<ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ> m_data;

inline const QString &ENV_NAME() override{
    static const auto ret = QString("ğŸ‘‰ context.config.env_name ğŸ‘ˆ");
    return ret;
    }
public:

ğŸ‘‰ context.operation.name ğŸ‘ˆ(): qtgql::gqlwstransport::OperationHandlerABC(qtgql::gqlwstransport::GqlWsTrnsMsgWithID(qtgql::gqlwstransport::OperationPayload(
        {%- for line in context.operation.query.splitlines() %}"ğŸ‘‰ line ğŸ‘ˆ"{% endfor -%}
        ))){};

inline const QUuid &operation_id() const override{
return m_message_template.op_id;
}


void on_next(const QJsonObject &message) override{
    if (!m_data && message.contains("data")){
        auto data = message.value("data").toObject();
        if (data.contains("ğŸ‘‰ context.operation.root_field.name ğŸ‘ˆ")){
            m_data = std::make_unique<ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ>(
ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ context.operation.root_field.definition.type.is_object_type.name ğŸ‘ˆ::from_json(
        data.value("ğŸ‘‰ context.operation.root_field.name ğŸ‘ˆ").toObject(), OPERATION_METADATA.selections, OPERATION_METADATA)
);
        }
    }
}
inline const ğŸ‘‰ context.operation.root_field.property_type ğŸ‘ˆ* get_data(){
    return m_data.get();
}

{% if context.operation.variables %}
void setVariables(
{% for var in context.operation.variables -%}
const std::optional<ğŸ‘‰ var.type.member_type ğŸ‘ˆ>  ğŸ‘‰ var.name ğŸ‘ˆ {% if not loop.last %},{% endif %}
{% endfor -%}){
{% for var in context.operation.variables %}
if (ğŸ‘‰ var.name ğŸ‘ˆ.has_value()){
    m_variables.insert("ğŸ‘‰ var.name ğŸ‘ˆ",  ğŸ‘‰ var.json_repr() ğŸ‘ˆ);
}
{% endfor %}
}
{% endif %}

signals:
void dataChanged();

};
};
};

