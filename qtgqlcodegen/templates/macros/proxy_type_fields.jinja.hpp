{% macro proxy_type_fields(t, context) -%}
Q_OBJECT

{% for f in t.fields -%}
Q_PROPERTY(const ğŸ‘‰ f.property_type ğŸ‘ˆ ğŸ‘‰ f.name ğŸ‘ˆ READ ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ NOTIFY ğŸ‘‰ f.concrete.signal_name ğŸ‘ˆ);
{% endfor %}
signals:
{%for f in t.fields -%}
void ğŸ‘‰ f.concrete.signal_name ğŸ‘ˆ();
{% endfor %}
{# members -#}
{% if context.debug -%}
public: // WARNING: members are public because you have debug=True in your config file.
{% else -%}
protected:
{% endif -%}
{% if t.concrete.is_root -%} {# // root types are singletons, no need for shared ptr -#}
ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.concrete.name ğŸ‘ˆ * m_inst;
{% else -%}
const std::shared_ptr<ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰ t.concrete.name ğŸ‘ˆ> m_inst;
{% endif -%}
{% for ref_field in t.references -%}
const ğŸ‘‰ref_field.property_typeğŸ‘ˆ m_ğŸ‘‰ref_field.nameğŸ‘ˆ = {};
{% endfor %}
{%- for model_field in t.models -%}
ğŸ‘‰ model_field.property_type ğŸ‘ˆ ğŸ‘‰model_field.private_nameğŸ‘ˆ;
{% endfor %}
{% endmacro %}