{%- from "macros/deserialize_concrete_field.jinja.hpp" import  deserialize_concrete_field -%}
{%- from "macros/iterate_type_condition.jinja.hpp" import  iterate_type_condition -%}
{% macro update_concrete_field(parent_proxy_type, proxy_field,f_concrete, private_name, operation_pointer="operation") -%}
{% if proxy_field.variable_uses  -%}
ğŸ‘‰f_concrete.arguments_typeğŸ‘ˆ ğŸ‘‰private_nameğŸ‘ˆ_args = ğŸ‘‰ parent_proxy_type.name ğŸ‘ˆ::ğŸ‘‰proxy_field.variable_builder_name ğŸ‘ˆ(ğŸ‘‰ operation_pointer ğŸ‘ˆ);
{% endif %}
{%- set current -%}
{% if proxy_field.variable_uses  -%}
inst->ğŸ‘‰private_nameğŸ‘ˆ.at(ğŸ‘‰private_nameğŸ‘ˆ_args)
{%- else -%}
inst->ğŸ‘‰private_nameğŸ‘ˆ
{%- endif -%}
{%- endset -%}
{% set setter_end -%}
{% if proxy_field.variable_uses -%}
, ğŸ‘‰private_nameğŸ‘ˆ_args
{% endif -%}
{%- endset -%}
{%- set setter_name -%}inst->ğŸ‘‰ proxy_field.concrete.setter_name ğŸ‘ˆ{% endset -%}
{%- if TemplatesLogic.field_might_not_exists_on_update(proxy_field) -%}
{% if proxy_field.variable_uses  -%}
if (!qtgql::bases::backports::map_contains(inst->ğŸ‘‰private_nameğŸ‘ˆ, ğŸ‘‰private_nameğŸ‘ˆ_args))
{% else -%}
if (!ğŸ‘‰currentğŸ‘ˆ)
{% endif %}
{
    {#- // Note: we can't use deserializer name since it might not be an object type. -#}
    ğŸ‘‰deserialize_concrete_field(parent_proxy_type, proxy_field)ğŸ‘ˆ
}
else
{% endif -%}
if (!data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").isNull()){
{% if proxy_field.type.is_builtin_scalar -%}
    {% if proxy_field.type.is_void -%}
    /* deliberately empty */
    {% else -%}
    auto new_ğŸ‘‰f_concrete.nameğŸ‘ˆ = std::make_shared<ğŸ‘‰f_concrete.type.type_name()ğŸ‘ˆ>(data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").ğŸ‘‰ proxy_field.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ);
    auto old_ğŸ‘‰f_concrete.nameğŸ‘ˆ = ğŸ‘‰currentğŸ‘ˆ;
    if ({% if proxy_field.type.is_optional or parent_proxy_type.implements_node -%}!old_ğŸ‘‰f_concrete.nameğŸ‘ˆ || {% endif -%} *old_ğŸ‘‰f_concrete.nameğŸ‘ˆ != *new_ğŸ‘‰f_concrete.nameğŸ‘ˆ){
        ğŸ‘‰ setter_name ğŸ‘ˆ(new_ğŸ‘‰f_concrete.nameğŸ‘ˆ ğŸ‘‰ setter_end ğŸ‘ˆ);
    }
    {% endif -%}
{% elif proxy_field.type.is_custom_scalar %}
auto new_ğŸ‘‰proxy_field.nameğŸ‘ˆ = std::make_shared<ğŸ‘‰ proxy_field.type.type_name() ğŸ‘ˆ>();
new_ğŸ‘‰proxy_field.nameğŸ‘ˆ->deserialize(data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ"));
auto old_ğŸ‘‰f_concrete.nameğŸ‘ˆ = ğŸ‘‰currentğŸ‘ˆ;
if ({% if proxy_field.type.is_optional or parent_proxy_type.implements_node -%}!ğŸ‘‰currentğŸ‘ˆ || {% endif %}*ğŸ‘‰currentğŸ‘ˆ != *new_ğŸ‘‰proxy_field.nameğŸ‘ˆ){
ğŸ‘‰ setter_name ğŸ‘ˆ(new_ğŸ‘‰f_concrete.nameğŸ‘ˆ ğŸ‘‰ setter_end ğŸ‘ˆ);
}
{% elif proxy_field.type.is_queried_object_type %}
    auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_data = data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").toObject();
    {% if f_concrete.implements_node %}
    if (ğŸ‘‰currentğŸ‘ˆ && *ğŸ‘‰currentğŸ‘ˆ->get_id() == ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.value("id").toString()){
    ğŸ‘‰proxy_field.type.updater_nameğŸ‘ˆ(ğŸ‘‰currentğŸ‘ˆ, ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,  ğŸ‘‰operation_pointerğŸ‘ˆ);
    }
    else{
    ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰proxy_field.type.deserializer_nameğŸ‘ˆ(ğŸ‘‰f_concrete.nameğŸ‘ˆ_data, ğŸ‘‰operation_pointerğŸ‘ˆ) ğŸ‘‰ setter_end ğŸ‘ˆ);
    }
    {% else %}
    ğŸ‘‰proxy_field.type.updater_nameğŸ‘ˆ(ğŸ‘‰currentğŸ‘ˆ, ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,  ğŸ‘‰operation_pointerğŸ‘ˆ);
    {% endif %}
{% elif proxy_field.type.is_model %}
    {% if proxy_field.type.of_type.is_builtin_scalar %}
    auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_data = data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").toArray();
    auto new_len = ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.size();
    auto prev_len = ğŸ‘‰currentğŸ‘ˆ->rowCount();
    if (new_len < prev_len){
        ğŸ‘‰currentğŸ‘ˆ->removeRows(prev_len - 1, prev_len - new_len);
    }
    for (int  i = 0; i < ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.size(); i++){
        auto node_data = ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.at(i).ğŸ‘‰ f_concrete.type.of_type.from_json_convertor ğŸ‘ˆ;
        if (i >= prev_len){
            ğŸ‘‰currentğŸ‘ˆ->append(node_data);
        } else if (node_data != ğŸ‘‰currentğŸ‘ˆ->get(i)){
            ğŸ‘‰currentğŸ‘ˆ->replace(i, node_data);
        }
    }


{% else %}
    ğŸ‘‰deserialize_concrete_field(parent_proxy_type, proxy_field)ğŸ‘ˆ
    {% endif %}
{% elif proxy_field.type.is_enum %}
auto new_ğŸ‘‰f_concrete.nameğŸ‘ˆ= std::make_shared<ğŸ‘‰proxy_field.type.namespaced_nameğŸ‘ˆ>(Enums::ğŸ‘‰proxy_field.type.map_nameğŸ‘ˆ::by_name(data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").toString()));
if (*ğŸ‘‰currentğŸ‘ˆ != *new_ğŸ‘‰f_concrete.nameğŸ‘ˆ){
ğŸ‘‰ setter_name ğŸ‘ˆ(new_ğŸ‘‰f_concrete.nameğŸ‘ˆ ğŸ‘‰ setter_end ğŸ‘ˆ);
}
{% elif proxy_field.type.is_queried_interface or proxy_field.type.is_queried_union %}
auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_data = data.value("ğŸ‘‰f_concrete.nameğŸ‘ˆ").toObject();
auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_typename  = ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.value("__typename").toString();
{%set type_cond -%}ğŸ‘‰f_concrete.nameğŸ‘ˆ_typename{% endset -%}
{% for choice in proxy_field.type.choices %}
{% set do_on_meets -%}
{% if choice.implements_node %}
auto ğŸ‘‰f_concrete.nameğŸ‘ˆ_casted = std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(ğŸ‘‰currentğŸ‘ˆ);
if (ğŸ‘‰currentğŸ‘ˆ && *ğŸ‘‰f_concrete.nameğŸ‘ˆ_casted->get_id() == ğŸ‘‰f_concrete.nameğŸ‘ˆ_data.value("id").toString()){
ğŸ‘‰choice.updater_nameğŸ‘ˆ(ğŸ‘‰f_concrete.nameğŸ‘ˆ_casted, ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,  ğŸ‘‰operation_pointerğŸ‘ˆ);
}
else{
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰choice.deserializer_nameğŸ‘ˆ(ğŸ‘‰proxy_field.nameğŸ‘ˆ_data, ğŸ‘‰operation_pointerğŸ‘ˆ) ğŸ‘‰ setter_end ğŸ‘ˆ);
}
{% else %}
ğŸ‘‰choice.updater_nameğŸ‘ˆ(std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(ğŸ‘‰currentğŸ‘ˆ), ğŸ‘‰f_concrete.nameğŸ‘ˆ_data,  ğŸ‘‰operation_pointerğŸ‘ˆ);
{% endif %}
{% endset -%}
ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
{% endfor %}
{% else %}
throw qtgql::exceptions::NotImplementedError({"ğŸ‘‰proxy_field.type.__class__.__name__ğŸ‘ˆ is not supporting updates ATM"});
{% endif %}
}
{% if proxy_field.type.is_optional %}
else {
ğŸ‘‰ setter_name ğŸ‘ˆ({} ğŸ‘‰ setter_end ğŸ‘ˆ);
}
{% endif %}
{%- endmacro %}