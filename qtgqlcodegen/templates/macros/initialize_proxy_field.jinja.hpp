{%- from "macros/iterate_type_condition.jinja.hpp" import  iterate_type_condition -%}
{% macro initialize_proxy_field(field, operation_pointer = "operation") -%}
{%set instance_of_concrete -%}
m_inst->ğŸ‘‰field.concrete.getter_name ğŸ‘ˆ(ğŸ‘‰field.build_variables_tuple_for_field_arguments ğŸ‘ˆ)
{% endset -%}

{% if field.type.is_queried_object_type  and field.type.is_optional %}
if (ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
}
{% elif field.type.is_queried_object_type %}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
{% elif field.type.is_model  %}
    {% if  field.type.is_model.of_type.is_queried_object_type %}
    auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.type.of_type.nameğŸ‘ˆ*>>();
    for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
    init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(new ğŸ‘‰field.type.of_type.nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, node));
    }
    ğŸ‘‰field.private_nameğŸ‘ˆ = new qtgql::bases::ListModelABC<ğŸ‘‰ field.type.of_type.name ğŸ‘ˆ>(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
    {% elif field.type.is_model.of_type.is_queried_union or field.type.is_model.of_type.is_queried_interface %}
    auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.type.of_type.property_typeğŸ‘ˆ>>();
    for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
        auto ğŸ‘‰field.nameğŸ‘ˆ_typename = node->__typename();
        {%set type_cond -%}ğŸ‘‰field.nameğŸ‘ˆ_typename{% endset -%}
        {% for choice in field.type.of_type.choices -%}
        {% set do_on_meets -%}
        init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(qobject_cast<ğŸ‘‰ field.type.of_type.property_type ğŸ‘ˆ>(new ğŸ‘‰choice.type_name()ğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, std::static_pointer_cast<ğŸ‘‰ choice.concrete.name ğŸ‘ˆ>(node))));
        {% endset -%}
        ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
        {% endfor %}
    }
    ğŸ‘‰field.private_nameğŸ‘ˆ = new qtgql::bases::ListModelABC<ğŸ‘‰ field.type.of_type.type_name() ğŸ‘ˆ>(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
    {% else %}
    not implemented
    {% endif %}
{% elif field.type.is_queried_interface or  field.type.is_queried_union %}
auto concrete_ğŸ‘‰field.nameğŸ‘ˆ = ğŸ‘‰ instance_of_concrete ğŸ‘ˆ;
auto ğŸ‘‰field.nameğŸ‘ˆ_typename = concrete_ğŸ‘‰field.nameğŸ‘ˆ->__typename();
{%set type_cond -%}ğŸ‘‰field.nameğŸ‘ˆ_typename{% endset -%}
{% for choice in field.type.choices -%}
{% set do_on_meets -%}
ğŸ‘‰field.private_nameğŸ‘ˆ = qobject_cast<ğŸ‘‰ field.type.property_type ğŸ‘ˆ>(new ğŸ‘‰choice.type_name()ğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, std::static_pointer_cast<ğŸ‘‰ choice.concrete.name ğŸ‘ˆ>(concrete_ğŸ‘‰field.nameğŸ‘ˆ)));
{% endset -%}
ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
{% endfor %}
{% endif -%}
{% endmacro -%}