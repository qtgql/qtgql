{% macro initialize_proxy_field(field, operation_pointer = "operation") -%}
{%set instance_of_concrete -%}
m_inst->ğŸ‘‰field.concrete.getter_name ğŸ‘ˆ(ğŸ‘‰field.build_variables_tuple_for_field_arguments ğŸ‘ˆ)
{% endset -%}

{% if field.type.is_queried_object_type  and field.type.is_optional %}
if (ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
}
else{
ğŸ‘‰field.private_nameğŸ‘ˆ = nullptr;
}
{% elif field.type.is_queried_object_type %}
ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type_nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, ğŸ‘‰ instance_of_concrete ğŸ‘ˆ);
{% elif field.type.is_model and field.type.is_model.of_type.is_queried_object_type %}
auto init_list_ğŸ‘‰ field.name ğŸ‘ˆ =  std::make_unique<QList<ğŸ‘‰field.type.of_type.nameğŸ‘ˆ*>>();
for (const auto & node: ğŸ‘‰ instance_of_concrete ğŸ‘ˆ){
init_list_ğŸ‘‰ field.name ğŸ‘ˆ->append(new ğŸ‘‰field.type.of_type.nameğŸ‘ˆ(ğŸ‘‰operation_pointerğŸ‘ˆ, node));
}
ğŸ‘‰field.private_nameğŸ‘ˆ = new qtgql::bases::ListModelABC<ğŸ‘‰ field.type.of_type.name ğŸ‘ˆ>(this, std::move(init_list_ğŸ‘‰ field.name ğŸ‘ˆ));
{% endif -%}
{% endmacro -%}