{%- from "macros/iterate_type_condition.jinja.hpp" import  iterate_type_condition -%}
{% macro deserialize_concrete_field(proxy_field, operation_pointer = "operation",
                           do_after_deserialized = "") -%}
{% set setter_name %}inst->ğŸ‘‰ proxy_field.concrete.setter_name ğŸ‘ˆ{% endset %}
{% set setter_end -%}
{% if proxy_field.cached_by_args %}
, ğŸ‘‰proxy_field.build_variables_tuple_for_field_argumentsğŸ‘ˆ
{% endif -%}
{% endset -%}
if (!data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").isNull()){
{% if proxy_field.type.is_queried_object_type -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰proxy_field.type.deserializer_nameğŸ‘ˆ(data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").toObject(), ğŸ‘‰operation_pointerğŸ‘ˆ) ğŸ‘‰ setter_end ğŸ‘ˆ);

{% elif proxy_field.type.is_queried_interface or  proxy_field.type.is_queried_union -%}
auto ğŸ‘‰proxy_field.nameğŸ‘ˆ_data = data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").toObject();
auto ğŸ‘‰proxy_field.nameğŸ‘ˆ_typename  = ğŸ‘‰proxy_field.nameğŸ‘ˆ_data.value("__typename").toString();
{%set type_cond -%}ğŸ‘‰proxy_field.nameğŸ‘ˆ_typename{% endset -%}
{% for choice in proxy_field.type.choices -%}
{% set do_on_meets -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰choice.deserializer_nameğŸ‘ˆ(ğŸ‘‰proxy_field.nameğŸ‘ˆ_data, ğŸ‘‰operation_pointerğŸ‘ˆ) ğŸ‘‰ setter_end ğŸ‘ˆ);
{% endset -%}
ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
{% endfor %}
{% elif proxy_field.type.is_model -%}
    ğŸ‘‰proxy_field.concrete.type.member_typeğŸ‘ˆ ğŸ‘‰proxy_field.nameğŸ‘ˆ_init_list;
    for (const auto& node: data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").toArray()){
    {% if proxy_field.type.is_model.of_type.is_queried_object_type %}
        ğŸ‘‰proxy_field.nameğŸ‘ˆ_init_list.append(ğŸ‘‰ proxy_field.type.is_model.of_type.is_queried_object_type.deserializer_name ğŸ‘ˆ(node.toObject(), ğŸ‘‰operation_pointerğŸ‘ˆ));
    {% elif proxy_field.type.is_model.of_type.is_queried_union or proxy_field.type.is_model.of_type.is_queried_interface %}
        auto node_data = node.toObject();
        auto ğŸ‘‰proxy_field.nameğŸ‘ˆ_typename = node_data.value("__typename").toString();
        {%set type_cond -%}ğŸ‘‰proxy_field.nameğŸ‘ˆ_typename{% endset -%}
        {% for choice in proxy_field.type.of_type.choices -%}
        {% set do_on_meets -%}
        ğŸ‘‰proxy_field.nameğŸ‘ˆ_init_list.append(ğŸ‘‰choice.deserializer_nameğŸ‘ˆ(node_data, ğŸ‘‰operation_pointerğŸ‘ˆ) ğŸ‘‰ setter_end ğŸ‘ˆ);
        {% endset -%}
        ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
        {% endfor %}
    {% else %}
    throw qtgql::exceptions::NotImplementedError({"can't deserialize model of ğŸ‘‰proxy_field.type.of_type.__class__ğŸ‘ˆ"});
    {% endif %}
    };
    ğŸ‘‰ setter_name ğŸ‘ˆ(ğŸ‘‰proxy_field.nameğŸ‘ˆ_init_listğŸ‘‰ setter_end ğŸ‘ˆ);
{% elif proxy_field.type.is_builtin_scalar -%}
    {% if proxy_field.type.is_void -%}
    /* deliberately empty */
    {% else -%}
    ğŸ‘‰ setter_name ğŸ‘ˆ(data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").ğŸ‘‰ proxy_field.type.is_builtin_scalar.from_json_convertor ğŸ‘ˆ ğŸ‘‰ setter_end ğŸ‘ˆ);
    {% endif %}
    {% elif proxy_field.type.is_custom_scalar -%}
    auto new_ğŸ‘‰proxy_field.nameğŸ‘ˆ = ğŸ‘‰ proxy_field.type.is_custom_scalar.type_name() ğŸ‘ˆ();
    new_ğŸ‘‰proxy_field.nameğŸ‘ˆ.deserialize(data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ"));
    ğŸ‘‰ setter_name ğŸ‘ˆ(new_ğŸ‘‰proxy_field.nameğŸ‘ˆ ğŸ‘‰ setter_end ğŸ‘ˆ);
{% elif proxy_field.type.is_enum -%}
ğŸ‘‰ setter_name ğŸ‘ˆ(Enums::ğŸ‘‰proxy_field.type.is_enum.map_nameğŸ‘ˆ::by_name(data.value("ğŸ‘‰proxy_field.nameğŸ‘ˆ").toString())ğŸ‘‰ setter_end ğŸ‘ˆ);
{% endif -%} ğŸ‘‰ do_after_deserialized ğŸ‘ˆ
};
{%- endmacro %}
