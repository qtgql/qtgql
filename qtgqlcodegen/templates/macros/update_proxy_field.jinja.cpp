{%- from "macros/iterate_type_condition.jinja.hpp" import  iterate_type_condition -%}
{% macro update_proxy_field(parent_type, field, operation) -%}
{% if field.cached_by_args -%}
auto args_for_ğŸ‘‰field.name ğŸ‘ˆ = ğŸ‘‰ parent_type.name ğŸ‘ˆ::ğŸ‘‰field.variable_builder_name ğŸ‘ˆ(m_operation);
{% set new_concrete -%}
m_inst->ğŸ‘‰field.concrete.getter_nameğŸ‘ˆ(args_for_ğŸ‘‰field.name ğŸ‘ˆ)
{%- endset -%}
{% else %}
{% set new_concrete -%}
m_inst->ğŸ‘‰field.concrete.getter_nameğŸ‘ˆ()
{%- endset -%}
{% endif %}


auto operation = m_operation;
{% if field.type.is_model and not field.type.of_type.is_builtin_scalar -%}
    auto new_data = ğŸ‘‰new_concreteğŸ‘ˆ;
    auto new_len = new_data.size();
    auto prev_len = ğŸ‘‰field.private_nameğŸ‘ˆ->rowCount();
    if (new_len < prev_len){
        ğŸ‘‰field.private_nameğŸ‘ˆ->removeRows(new_len, prev_len - new_len);
    }
    for (int i = 0; i < new_len; i++){
        const auto& concrete = new_data.at(i);
    {% if field.type.of_type.is_queried_object_type -%}
        if (i >= prev_len){
            ğŸ‘‰field.private_nameğŸ‘ˆ->append(new ğŸ‘‰field.type.of_type.nameğŸ‘ˆ(operation, concrete));
        } else {
            auto proxy_to_update = ğŸ‘‰field.private_nameğŸ‘ˆ->get(i);
            if(proxy_to_update){
                proxy_to_update->qtgql_replace_concrete(concrete);
            }
            else{ {#// handle optionals no need to delete -#}
                ğŸ‘‰field.private_nameğŸ‘ˆ->replace(i, new ğŸ‘‰field.type.of_type.nameğŸ‘ˆ(operation, concrete));
            }
        }

    {% elif field.type.of_type.is_queried_union or field.type.of_type.is_queried_interface %}
        auto ğŸ‘‰field.nameğŸ‘ˆ_typename = concrete->__typename();
        {%set type_cond -%}ğŸ‘‰field.nameğŸ‘ˆ_typename{% endset -%}
        {% for choice in field.type.of_type.choices %}
        {% set do_on_meets -%}
        if (i >= prev_len){
            ğŸ‘‰field.private_nameğŸ‘ˆ->append(new ğŸ‘‰choice.nameğŸ‘ˆ(operation, std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(concrete)));
        } else{
            auto proxy_to_update = ğŸ‘‰field.private_nameğŸ‘ˆ->get(i);
            if (proxy_to_update && proxy_to_update->__typename() == "ğŸ‘‰choice.concrete.nameğŸ‘ˆ"){
                qobject_cast<ğŸ‘‰choice.property_typeğŸ‘ˆ>(proxy_to_update)->qtgql_replace_concrete(std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(concrete));
            }
            else{
                ğŸ‘‰field.private_nameğŸ‘ˆ->replace(i, new ğŸ‘‰choice.nameğŸ‘ˆ(operation, std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(concrete)));
                delete proxy_to_update; {# // might have been optional or the type_name changed #}
            }

        }

        {% endset %}
        ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
        {% endfor %}
    {% else %}
    throw qtgql::exceptions::NotImplementedError({""
                                                  "can't update model of ğŸ‘‰field.type.of_type.__class__ğŸ‘ˆ"});
    {% endif %}
    }
{% elif field.type.is_queried_object_type -%}
auto concrete = ğŸ‘‰new_concreteğŸ‘ˆ;
if (ğŸ‘‰field.private_nameğŸ‘ˆ){
    ğŸ‘‰field.private_nameğŸ‘ˆ->qtgql_replace_concrete(concrete);
}
else{
    ğŸ‘‰field.private_nameğŸ‘ˆ = new ğŸ‘‰field.type.nameğŸ‘ˆ(operation, concrete);
    emit ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ();
}
{% elif field.type.is_queried_interface or field.type.is_queried_union -%}
auto concrete = ğŸ‘‰new_concreteğŸ‘ˆ;
auto ğŸ‘‰field.nameğŸ‘ˆ_typename = concrete->__typename();
{%set type_cond -%}ğŸ‘‰field.nameğŸ‘ˆ_typename{% endset -%}
{% for choice in field.type.choices %}
{% set do_on_meets -%}
if (ğŸ‘‰field.private_nameğŸ‘ˆ && ğŸ‘‰field.private_nameğŸ‘ˆ->__typename() == "ğŸ‘‰choice.concrete.nameğŸ‘ˆ"){
qobject_cast<ğŸ‘‰choice.property_typeğŸ‘ˆ>(ğŸ‘‰field.private_nameğŸ‘ˆ)->qtgql_replace_concrete(std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(concrete));
}
else{
    delete ğŸ‘‰field.private_nameğŸ‘ˆ; {# // might have been optional or the type_name changed #}
    ğŸ‘‰field.private_nameğŸ‘ˆ = qobject_cast<ğŸ‘‰field.type.property_typeğŸ‘ˆ>(new ğŸ‘‰choice.nameğŸ‘ˆ(operation, std::static_pointer_cast<ğŸ‘‰choice.concrete.nameğŸ‘ˆ>(concrete)));
}
{% endset -%}
ğŸ‘‰iterate_type_condition(choice,type_cond, do_on_meets, loop)ğŸ‘ˆ
{% endfor %}
emit ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ();
{% else -%}
emit ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ();
{% endif -%}
{% endmacro %}