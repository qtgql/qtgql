{%- from "macros/initialize_proxy_field.jinja.hpp" import initialize_proxy_field -%}
{%- from "macros/deserialize_concrete_field.jinja.hpp" import  deserialize_concrete_field -%}
{%- from "macros/update_concrete_field.jinja.hpp" import  update_concrete_field -%}
{%- from "macros/update_proxy_field.jinja.cpp" import  update_proxy_field -%}
{%- from "macros/iterate_type_condition.jinja.hpp" import  iterate_type_condition -%}
{%- from "macros/serialize_input_variable.jinja.hpp" import  serialize_input_variable -%}

#include "./ğŸ‘‰ context.operation.name ğŸ‘ˆ.hpp"

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ::ğŸ‘‰context.nsğŸ‘ˆ{

// Interfaces
{% for interface in context.operation.interfaces -%}
std::shared_ptr<ğŸ‘‰ interface.concrete.name ğŸ‘ˆ> ğŸ‘‰ interface.deserializer_name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation){
auto type_name = data.value("__typename").toString();
{% for choice in interface.choices -%}
{% set do_on_meets -%}
{% if interface.concrete.implements_node %}
auto cached_maybe = ğŸ‘‰ interface.concrete.name ğŸ‘ˆ::get_node(data.value("id").toString());
if(cached_maybe.has_value()){
auto node = cached_maybe.value();
ğŸ‘‰ interface.updater_name ğŸ‘ˆ(node, data, operation);
return std::static_pointer_cast<ğŸ‘‰ interface.concrete.name ğŸ‘ˆ>(node);
}
{% endif -%}
return std::static_pointer_cast<ğŸ‘‰ interface.concrete.name ğŸ‘ˆ>(ğŸ‘‰ choice.deserializer_name ğŸ‘ˆ(data, operation));
{% endset -%}
ğŸ‘‰iterate_type_condition(choice,"type_name", do_on_meets, loop)ğŸ‘ˆ
{% endfor -%}
throw qtgql::exceptions::InterfaceDeserializationError(type_name.toStdString());
}
{% endfor %}


{% for t in context.operation.narrowed_types -%}
// Constructor
{% set base_name -%}
ğŸ‘‰ context.qtgql_types.ObjectTypeABC.last if not t.base_interface else t.base_interface.name ğŸ‘ˆ
{% endset -%}
ğŸ‘‰ t.name ğŸ‘ˆ::ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation, const std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> &inst)
: m_inst{inst}, ğŸ‘‰ base_name ğŸ‘ˆ::ğŸ‘‰ base_name ğŸ‘ˆ(operation)
{
    m_operation = operation;
    {%- for field in t.fields -%}
    ğŸ‘‰ initialize_proxy_field(t, field) ğŸ‘ˆ
    {% endfor -%}
    _qtgql_connect_signals();
}

void ğŸ‘‰ t.name ğŸ‘ˆ::_qtgql_connect_signals(){
{# connecting signals here, when the concrete changed it will be mirrored here. -#}
auto m_inst_ptr = m_inst.get();
Q_ASSERT_X(m_inst_ptr, __FILE__, "Tried to instantiate a proxy object with an empty pointer!");
{% for field in t.fields -%}
connect(m_inst_ptr, &ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰t.concrete.nameğŸ‘ˆ::ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ, this,
[&](){
ğŸ‘‰update_proxy_field(t, field, context.operation)ğŸ‘ˆ
});
{% endfor -%}
};

// Deserialzier
{% if not t.concrete.is_root %}
std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> ğŸ‘‰ t.deserializer_name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation){
if (data.isEmpty()){
    return {};
}
{% if t.concrete.implements_node %}
auto cached_maybe = ğŸ‘‰ t.concrete.name ğŸ‘ˆ::get_node(data.value("id").toString());
if(cached_maybe.has_value()){
    auto node = cached_maybe.value();
    ğŸ‘‰ t.updater_name ğŸ‘ˆ(node, data, operation);
    return node;
}
{% endif -%}
auto inst = ğŸ‘‰ t.concrete.name ğŸ‘ˆ::shared();
{% for f in t.fields -%}
ğŸ‘‰deserialize_concrete_field(t, f)ğŸ‘ˆ
{% endfor %}
{% if t.concrete. implements_node %}
ğŸ‘‰ t.concrete.name ğŸ‘ˆ::ENV_CACHE()->add_node(inst);
{% endif %}
return inst;
};
{% endif %}

// Updater
void ğŸ‘‰ t.updater_name ğŸ‘ˆ(ğŸ‘‰ t.concrete.member_type_arg ğŸ‘ˆ inst, const QJsonObject &data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation)
{
{%for f in t.fields -%}
ğŸ‘‰update_concrete_field(t, f,f.concrete, private_name=f.private_name, operation_pointer="operation")ğŸ‘ˆ
{% endfor %}
};



// ğŸ‘‰ t.name ğŸ‘ˆ Getters
{%for f in t.fields -%}
[[nodiscard]] const ğŸ‘‰ f.type.property_type ğŸ‘ˆ  ğŸ‘‰ t.name ğŸ‘ˆ::ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ() const {
{% if f.type.is_model and f.type.of_type.is_builtin_scalar -%}
return m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ(
        {% if f.cached_by_args -%}
        ğŸ‘‰f.variable_builder_name ğŸ‘ˆ(m_operation)
        {% endif -%}
        ).get();
{% elif f.type.is_queried_object_type or f.type.is_queried_interface or f.type.is_queried_union or f.type.is_model  -%}
return ğŸ‘‰f.private_nameğŸ‘ˆ;
{% elif f.type.is_custom_scalar %}
    {%- set value_or_null -%}
    m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ(
    {%- if f.cached_by_args -%}
    ğŸ‘‰f.variable_builder_name ğŸ‘ˆ(m_operation)
    {% endif -%}
    )
    {%- endset -%}
    {% if f.type.is_optional -%}
    auto ret = ğŸ‘‰ value_or_null ğŸ‘ˆ;
    if (ret)
    return ret->to_qt();
    else
    return ğŸ‘‰f.type.default_value_for_proxy ğŸ‘ˆ;
    {% else -%}
    return ğŸ‘‰ value_or_null ğŸ‘ˆ->to_qt();
    {% endif -%}
{% else -%}
    {%- set value_or_null -%}
    m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ(
    {%- if f.cached_by_args -%}
    ğŸ‘‰f.variable_builder_name ğŸ‘ˆ(m_operation)
    {% endif -%}
    );
    {%- endset -%}
    {% if f.type.is_optional -%}
    auto ret = ğŸ‘‰ value_or_null ğŸ‘ˆ
    if (ret)
        return *ret;
    else
        return ğŸ‘‰f.type.default_value_for_proxy ğŸ‘ˆ;
    {% else -%}
    return *ğŸ‘‰ value_or_null ğŸ‘ˆ;
    {% endif -%}
{%- endif -%}
};
{% endfor %}
// ğŸ‘‰ t.name ğŸ‘ˆ custom getters
{% for f in t.fields_with_custom_getter -%}
[[nodiscard]] const ğŸ‘‰ f.type.proxy_cpp_type ğŸ‘ˆ & ğŸ‘‰ t.name ğŸ‘ˆ::ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ_cpp() const {
    return m_inst->ğŸ‘‰ f.concrete.getter_name ğŸ‘ˆ(
    {%- if f.cached_by_args -%}
    ğŸ‘‰f.variable_builder_name ğŸ‘ˆ(m_operation)
    {% endif -%}
    );
}
{% endfor -%}

// args builders
{%for f in t.fields_with_args -%}
ğŸ‘‰ f.concrete.arguments_type ğŸ‘ˆ  ğŸ‘‰ t.name ğŸ‘ˆ::ğŸ‘‰ f.variable_builder_name ğŸ‘ˆ(const ğŸ‘‰context.operation.nameğŸ‘ˆ* operation){
    ğŸ‘‰ f.concrete.arguments_type ğŸ‘ˆ qtgql__ret;
    {%for var_use in f.variable_uses -%}
    {% set arg_attr_name -%} operation->vars_inst.ğŸ‘‰ var_use.variable.name ğŸ‘ˆ {% endset -%}
    ğŸ‘‰serialize_input_variable("qtgql__ret", var_use.variable, attr_name=arg_attr_name, json_name=var_use.argument[1].name)ğŸ‘ˆ
    {% endfor -%}
    return qtgql__ret;
}
{% endfor %}

{% if  not t.concrete.is_root -%}
void ğŸ‘‰ t.name ğŸ‘ˆ::qtgql_replace_concrete(const std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> & new_inst){
    if (new_inst == m_inst){
    return;
    }
    m_inst->disconnect(this);
    {% for field in t.fields -%}
    if(m_inst->ğŸ‘‰ field.private_name ğŸ‘ˆ != new_inst->ğŸ‘‰ field.private_name ğŸ‘ˆ){
    ğŸ‘‰update_proxy_field(t, field, context.operation)ğŸ‘ˆ
    };
    {% endfor -%}
    m_inst = new_inst;
    _qtgql_connect_signals();
};
{% endif -%}
{% endfor %}
}
