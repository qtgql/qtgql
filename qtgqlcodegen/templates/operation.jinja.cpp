{% import "macros.jinja.hpp" as macros -%}
#include "./ğŸ‘‰ context.operation.name ğŸ‘ˆ.hpp"

namespace ğŸ‘‰ context.config.env_name ğŸ‘ˆ::ğŸ‘‰context.nsğŸ‘ˆ{

{% for interface in context.interfaces -%}
std::shared_ptr<ğŸ‘‰ interface.name ğŸ‘ˆ> ğŸ‘‰ interface.deserializer_name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation){
auto tp_name = data["__typename"].toString();
{% for impl in interface.implementations.values() -%}
if ("ğŸ‘‰ impl.name ğŸ‘ˆ" == tp_name){
return std::static_pointer_cast<ğŸ‘‰ interface.name ğŸ‘ˆ>(ğŸ‘‰ impl.deserializer_name ğŸ‘ˆ(data, operation));
}
{% endfor %}
throw qtgql::exceptions::InterfaceDeserializationError(tp_name.toStdString());
}
{% endfor %}


{% for t in context.operation.narrowed_types %}
ğŸ‘‰ t.name ğŸ‘ˆ::ğŸ‘‰ t.name ğŸ‘ˆ(ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation, const std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> &inst)
: m_inst{inst}, QObject::QObject(operation)
{
    {%- for field in t.fields -%}
    ğŸ‘‰ macros.initialize_proxy_field(field) ğŸ‘ˆ
    {#- updates logic -#}
    connect(m_inst.get(), &ğŸ‘‰context.schema_nsğŸ‘ˆ::ğŸ‘‰t.concrete.nameğŸ‘ˆ::ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ, this,
            [&](){emit ğŸ‘‰ field.concrete.signal_name ğŸ‘ˆ();});
    {% endfor -%}
}
std::shared_ptr<ğŸ‘‰ t.concrete.name ğŸ‘ˆ> ğŸ‘‰ t.concrete.deserializer_name ğŸ‘ˆ(const QJsonObject& data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation){
if (data.isEmpty()){
    return {};
}
{% if t.concrete.implements_node %}
auto cached_maybe = ğŸ‘‰ t.concrete.name ğŸ‘ˆ::get_node(data.value("id").toString());
if(cached_maybe.has_value()){
    auto node = cached_maybe.value();
    ğŸ‘‰ t.concrete.updater_name ğŸ‘ˆ(node, data, operation);
    return node;
}
{% endif %}

auto inst = std::make_shared<ğŸ‘‰ t.concrete.name ğŸ‘ˆ>();
{% for f in t.fields -%}
{% set setter %}inst->ğŸ‘‰ f.concrete.setter_name ğŸ‘ˆ{% endset %}
ğŸ‘‰macros.deserialize_field(f, setter)ğŸ‘ˆ
{% endfor %}
{% if t.concrete. implements_node %}
ğŸ‘‰ t.concrete.name ğŸ‘ˆ::ENV_CACHE()->add_node(inst);
{% endif %}
return inst;
};

void ğŸ‘‰ t.concrete.updater_name ğŸ‘ˆ(ğŸ‘‰ t.concrete.member_type ğŸ‘ˆ &inst, const QJsonObject &data, const ğŸ‘‰ context.operation.name ğŸ‘ˆ * operation)
{
{%for f in t.fields -%}
ğŸ‘‰ macros.update_concrete_field(f,f.concrete, fset_name=f.concrete.setter_name, private_name=f.private_name, operation_pointer="operation") ğŸ‘ˆ
{% endfor %}
};
{% endfor %}
}

